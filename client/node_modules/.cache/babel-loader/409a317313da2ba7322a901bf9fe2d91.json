{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _require = require('@twilio/webrtc'),\n    DefaultMediaStream = _require.MediaStream,\n    DefaultRTCIceCandidate = _require.RTCIceCandidate,\n    DefaultRTCPeerConnection = _require.RTCPeerConnection,\n    DefaultRTCSessionDescription = _require.RTCSessionDescription,\n    getStatistics = _require.getStats;\n\nvar _require2 = require('@twilio/webrtc/lib/util'),\n    guessBrowser = _require2.guessBrowser;\n\nvar _require3 = require('@twilio/webrtc/lib/util/sdp'),\n    getSdpFormat = _require3.getSdpFormat;\n\nvar _require4 = require('../../util/constants'),\n    DEFAULT_LOG_LEVEL = _require4.DEFAULT_LOG_LEVEL;\n\nvar _require5 = require('../../util/sdp'),\n    createCodecMapForMediaSection = _require5.createCodecMapForMediaSection,\n    getMediaSections = _require5.getMediaSections,\n    revertSimulcastForNonVP8MediaSections = _require5.revertSimulcastForNonVP8MediaSections,\n    setBitrateParameters = _require5.setBitrateParameters,\n    setCodecPreferences = _require5.setCodecPreferences,\n    setSimulcast = _require5.setSimulcast,\n    unifiedPlanAddOrRewriteNewTrackIds = _require5.unifiedPlanAddOrRewriteNewTrackIds,\n    unifiedPlanAddOrRewriteTrackIds = _require5.unifiedPlanAddOrRewriteTrackIds,\n    unifiedPlanFilterLocalCodecs = _require5.unifiedPlanFilterLocalCodecs;\n\nvar _require6 = require('../../util/twilio-video-errors'),\n    MediaClientLocalDescFailedError = _require6.MediaClientLocalDescFailedError,\n    MediaClientRemoteDescFailedError = _require6.MediaClientRemoteDescFailedError;\n\nvar utils = require('../../util');\n\nvar buildLogLevels = utils.buildLogLevels,\n    makeUUID = utils.makeUUID,\n    oncePerTick = utils.oncePerTick;\n\nvar IceBox = require('./icebox');\n\nvar DefaultIceConnectionMonitor = require('./iceconnectionmonitor.js');\n\nvar DataTrackReceiver = require('../../data/receiver');\n\nvar MediaTrackReceiver = require('../../media/track/receiver');\n\nvar StateMachine = require('../../statemachine');\n\nvar Log = require('../../util/log');\n\nvar IdentityTrackMatcher = require('../../util/sdp/trackmatcher/identity');\n\nvar OrderedTrackMatcher = require('../../util/sdp/trackmatcher/ordered');\n\nvar MIDTrackMatcher = require('../../util/sdp/trackmatcher/mid');\n\nvar workaroundIssue8329 = require('../../util/sdp/issue8329');\n\nvar guess = guessBrowser();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\nvar firefoxMajorVersion = isFirefox ? parseInt(navigator.userAgent.match(/Firefox\\/(\\d+)/)[1], 10) : null;\nvar isRTCRtpSenderParamsSupported = typeof RTCRtpSender !== 'undefined' && typeof RTCRtpSender.prototype.getParameters === 'function' && typeof RTCRtpSender.prototype.setParameters === 'function';\nvar nInstances = 0;\n/*\nPeerConnectionV2 States\n-----------------------\n\n    +------+    +--------+\n    |      |    |        |\n    | open |--->| closed |\n    |      |    |        |\n    +------+    +--------+\n      |  ^          ^\n      |  |          |\n      |  |          |\n      v  |          |\n  +----------+      |\n  |          |      |\n  | updating |------+\n  |          |\n  +----------+\n\n*/\n\nvar states = {\n  open: ['closed', 'updating'],\n  updating: ['closed', 'open'],\n  closed: []\n};\n/**\n * @extends StateMachine\n * @property {id}\n * @emits PeerConnectionV2#iceConnectionStateChanged\n * @emits PeerConnectionV2#candidates\n * @emits PeerConnectionV2#description\n */\n\nvar PeerConnectionV2 = function (_StateMachine) {\n  _inherits(PeerConnectionV2, _StateMachine);\n  /**\n   * Construct a {@link PeerConnectionV2}.\n   * @param {string} id\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} [options]\n   */\n\n\n  function PeerConnectionV2(id, encodingParameters, preferredCodecs, options) {\n    _classCallCheck(this, PeerConnectionV2);\n\n    var _this = _possibleConstructorReturn(this, (PeerConnectionV2.__proto__ || Object.getPrototypeOf(PeerConnectionV2)).call(this, 'open', states));\n\n    options = Object.assign({\n      enableDscp: false,\n      dummyAudioMediaStreamTrack: null,\n      iceServers: [],\n      isRTCRtpSenderParamsSupported: isRTCRtpSenderParamsSupported,\n      logLevel: DEFAULT_LOG_LEVEL,\n      offerOptions: {},\n      revertSimulcastForNonVP8MediaSections: revertSimulcastForNonVP8MediaSections,\n      setBitrateParameters: setBitrateParameters,\n      setCodecPreferences: setCodecPreferences,\n      setSimulcast: setSimulcast,\n      IceConnectionMonitor: DefaultIceConnectionMonitor,\n      MediaStream: DefaultMediaStream,\n      RTCIceCandidate: DefaultRTCIceCandidate,\n      RTCPeerConnection: DefaultRTCPeerConnection,\n      RTCSessionDescription: DefaultRTCSessionDescription\n    }, options);\n    var configuration = getConfiguration(options);\n    var sdpFormat = getSdpFormat(configuration.sdpSemantics);\n    var isUnifiedPlan = sdpFormat === 'unified';\n    var localMediaStream = isUnifiedPlan ? null : new options.MediaStream();\n    var logLevels = buildLogLevels(options.logLevel);\n    var RTCPeerConnection = options.RTCPeerConnection;\n\n    if (options.enableDscp === true) {\n      options.chromeSpecificConstraints = options.chromeSpecificConstraints || {};\n      options.chromeSpecificConstraints.optional = options.chromeSpecificConstraints.optional || [];\n      options.chromeSpecificConstraints.optional.push({\n        googDscp: true\n      });\n    }\n\n    var peerConnection = new RTCPeerConnection(configuration, options.chromeSpecificConstraints);\n\n    if (options.dummyAudioMediaStreamTrack) {\n      peerConnection.addTrack(options.dummyAudioMediaStreamTrack, localMediaStream || new options.MediaStream());\n    } // NOTE(mroberts): We do this to workaround the following bug:\n    //\n    //   https://bugzilla.mozilla.org/show_bug.cgi?id=1481335\n    //\n\n\n    if (isFirefox && firefoxMajorVersion < 65) {\n      peerConnection.createDataChannel(makeUUID());\n    }\n\n    Object.defineProperties(_this, {\n      _appliedTrackIdsToAttributes: {\n        value: new Map(),\n        writable: true\n      },\n      _dataChannels: {\n        value: new Map()\n      },\n      _dataTrackReceivers: {\n        value: new Set()\n      },\n      _descriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _enableDscp: {\n        value: options.enableDscp\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _isIceConnectionInactive: {\n        writable: true,\n        value: false\n      },\n      _isIceLite: {\n        writable: true,\n        value: false\n      },\n      _isRestartingIce: {\n        writable: true,\n        value: false\n      },\n      _isUnifiedPlan: {\n        value: isUnifiedPlan\n      },\n      _isRTCRtpSenderParamsSupported: {\n        value: options.isRTCRtpSenderParamsSupported\n      },\n      _lastIceConnectionState: {\n        writable: true,\n        value: null\n      },\n      _lastStableDescriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _localCandidates: {\n        writable: true,\n        value: []\n      },\n      _localCodecs: {\n        value: new Set()\n      },\n      _localCandidatesRevision: {\n        writable: true,\n        value: 1\n      },\n      _localDescriptionWithoutSimulcast: {\n        writable: true,\n        value: null\n      },\n      _localDescription: {\n        writable: true,\n        value: null\n      },\n      _localMediaStream: {\n        value: localMediaStream\n      },\n      _localUfrag: {\n        writable: true,\n        value: null\n      },\n      _log: {\n        value: options.log ? options.log.createLog('signaling', _this) : new Log('webrtc', _this, logLevels)\n      },\n      _remoteCodecMaps: {\n        value: new Map()\n      },\n      _rtpSenders: {\n        value: new Map()\n      },\n      _iceConnectionMonitor: {\n        value: new options.IceConnectionMonitor(peerConnection)\n      },\n      _mediaTrackReceivers: {\n        value: new Set()\n      },\n      _needsAnswer: {\n        writable: true,\n        value: false\n      },\n      _negotiationRole: {\n        writable: true,\n        value: null\n      },\n      _offerOptions: {\n        writable: true,\n        value: options.offerOptions\n      },\n      _peerConnection: {\n        value: peerConnection\n      },\n      _preferredAudioCodecs: {\n        value: preferredCodecs.audio\n      },\n      _preferredVideoCodecs: {\n        value: preferredCodecs.video\n      },\n      _shouldApplySimulcast: {\n        value: (isChrome || isSafari) && preferredCodecs.video.some(function (codecSettings) {\n          return codecSettings.codec.toLowerCase() === 'vp8' && codecSettings.simulcast;\n        })\n      },\n      _queuedDescription: {\n        writable: true,\n        value: null\n      },\n      _recycledTransceivers: {\n        value: {\n          audio: [],\n          video: []\n        }\n      },\n      _replaceTrackPromises: {\n        value: new Map()\n      },\n      _remoteCandidates: {\n        writable: true,\n        value: new IceBox()\n      },\n      _sdpFormat: {\n        value: sdpFormat\n      },\n      _setBitrateParameters: {\n        value: options.setBitrateParameters\n      },\n      _setCodecPreferences: {\n        value: options.setCodecPreferences\n      },\n      _setSimulcast: {\n        value: options.setSimulcast\n      },\n      _revertSimulcastForNonVP8MediaSections: {\n        value: options.revertSimulcastForNonVP8MediaSections\n      },\n      _RTCIceCandidate: {\n        value: options.RTCIceCandidate\n      },\n      _RTCPeerConnection: {\n        value: options.RTCPeerConnection\n      },\n      _RTCSessionDescription: {\n        value: options.RTCSessionDescription\n      },\n      _shouldOffer: {\n        writable: true,\n        value: false\n      },\n      _shouldRestartIce: {\n        writable: true,\n        value: false\n      },\n      _trackIdsToAttributes: {\n        value: new Map(),\n        writable: true\n      },\n      _trackMatcher: {\n        writable: true,\n        value: null\n      },\n      id: {\n        enumerable: true,\n        value: id\n      }\n    });\n    encodingParameters.on('changed', oncePerTick(function () {\n      if (_this._isRTCRtpSenderParamsSupported) {\n        if (!_this._needsAnswer) {\n          updateEncodingParameters(_this);\n        }\n\n        return;\n      }\n\n      _this.offer();\n    }));\n    peerConnection.addEventListener('datachannel', _this._handleDataChannelEvent.bind(_this));\n    peerConnection.addEventListener('icecandidate', _this._handleIceCandidateEvent.bind(_this));\n    peerConnection.addEventListener('iceconnectionstatechange', _this._handleIceConnectionStateChange.bind(_this));\n    peerConnection.addEventListener('signalingstatechange', _this._handleSignalingStateChange.bind(_this));\n    peerConnection.addEventListener('track', _this._handleTrackEvent.bind(_this));\n    var self = _this;\n\n    _this.on('stateChanged', function stateChanged(state) {\n      if (state !== 'closed') {\n        return;\n      }\n\n      self.removeListener('stateChanged', stateChanged);\n\n      self._dataChannels.forEach(function (dataChannel, dataTrackSender) {\n        self.removeDataTrackSender(dataTrackSender);\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(PeerConnectionV2, [{\n    key: 'toString',\n    value: function toString() {\n      return '[PeerConnectionV2 #' + this._instanceId + ': ' + this.id + ']';\n    }\n    /**\n     * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's\n     * RTCIceConnectionState.\n     * @property {RTCIceConnectionState}\n     */\n\n  }, {\n    key: '_addIceCandidate',\n\n    /**\n     * Add an ICE candidate to the {@link PeerConnectionV2}.\n     * @private\n     * @param {object} candidate\n     * @returns {Promise<void>}\n     */\n    value: function _addIceCandidate(candidate) {\n      var _this2 = this;\n\n      return Promise.resolve().then(function () {\n        candidate = new _this2._RTCIceCandidate(candidate);\n        return _this2._peerConnection.addIceCandidate(candidate);\n      }).catch(function (error) {\n        // NOTE(mmalavalli): Firefox 68+ now generates an RTCIceCandidate with an\n        // empty candidate string to signal end-of-candidates, followed by a null\n        // candidate. As of now, Chrome and Safari reject this RTCIceCandidate. Since\n        // this does not affect the media connection between Firefox 68+ and Chrome/Safari\n        // in Peer-to-Peer Rooms, we suppress the Error and log a warning message.\n        //\n        // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n        //\n        _this2._log.warn('Failed to add RTCIceCandidate ' + (candidate ? '\"' + candidate.candidate + '\"' : 'null') + ': ' + error.message);\n      });\n    }\n    /**\n     * Add ICE candidates to the {@link PeerConnectionV2}.\n     * @private\n     * @param {Array<object>} candidates\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_addIceCandidates',\n    value: function _addIceCandidates(candidates) {\n      return Promise.all(candidates.map(this._addIceCandidate, this)).then(function () {});\n    }\n    /**\n     * Add a new RTCRtpTransceiver or update an existing RTCRtpTransceiver for the\n     * given MediaStreamTrack.\n     * @private\n     * @param {MediaStreamTrack} track\n     * @returns {RTCRtpTransceiver}\n     */\n\n  }, {\n    key: '_addOrUpdateTransceiver',\n    value: function _addOrUpdateTransceiver(track) {\n      var _this3 = this;\n\n      var transceiver = takeRecycledTransceiver(this, track.kind);\n\n      if (transceiver && transceiver.sender) {\n        var oldTrackId = transceiver.sender.track ? transceiver.sender.track.id : null;\n\n        if (oldTrackId) {\n          this._log.warn('Reusing transceiver: ' + transceiver.mid + '] ' + oldTrackId + ' => ' + track.id);\n        } // NOTE(mpatwardhan):remember this transceiver while we replace track.\n        // we recycle transceivers that are not in use after 'negotiationCompleted', but we want to prevent\n        // this one from getting recycled while replaceTrack is pending.\n\n\n        this._replaceTrackPromises.set(transceiver, transceiver.sender.replaceTrack(track).then(function () {\n          transceiver.direction = 'sendrecv';\n        }, function () {// Do nothing.\n        }).finally(function () {\n          _this3._replaceTrackPromises.delete(transceiver);\n        }));\n\n        return transceiver;\n      }\n\n      return this._peerConnection.addTransceiver(track);\n    }\n    /**\n     * Check the {@link IceBox}.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_checkIceBox',\n    value: function _checkIceBox(description) {\n      var ufrag = getUfrag(description);\n\n      if (!ufrag) {\n        return Promise.resolve();\n      }\n\n      var candidates = this._remoteCandidates.setUfrag(ufrag);\n\n      return this._addIceCandidates(candidates);\n    }\n    /**\n     * Create an answer and set it on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<boolean>}\n     */\n\n  }, {\n    key: '_answer',\n    value: function _answer(offer) {\n      var _this4 = this;\n\n      return Promise.resolve().then(function () {\n        if (!_this4._negotiationRole) {\n          _this4._negotiationRole = 'answerer';\n        }\n\n        return _this4._setRemoteDescription(offer);\n      }).catch(function () {\n        throw new MediaClientRemoteDescFailedError();\n      }).then(function () {\n        return _this4._peerConnection.createAnswer();\n      }).then(function (answer) {\n        if (!isFirefox) {\n          answer = workaroundIssue8329(answer);\n        }\n\n        var description = answer;\n\n        if (_this4._shouldApplySimulcast) {\n          var updatedSdp = _this4._setSimulcast(answer.sdp, _this4._sdpFormat, _this4._trackIdsToAttributes); // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n          // unset simulcast for sections in local offer where corresponding\n          // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n\n\n          updatedSdp = _this4._revertSimulcastForNonVP8MediaSections(updatedSdp, answer.sdp, offer.sdp);\n          description = {\n            type: description.type,\n            sdp: updatedSdp\n          };\n        }\n\n        return _this4._setLocalDescription(description);\n      }).then(function () {\n        return _this4._checkIceBox(offer);\n      }).then(function () {\n        return _this4._queuedDescription && _this4._updateDescription(_this4._queuedDescription);\n      }).then(function () {\n        _this4._queuedDescription = null;\n        return _this4._maybeReoffer(_this4._peerConnection.localDescription);\n      }).catch(function (error) {\n        throw error instanceof MediaClientRemoteDescFailedError ? error : new MediaClientLocalDescFailedError();\n      });\n    }\n    /**\n     * Close the underlying RTCPeerConnection. Returns false if the\n     * RTCPeerConnection was already closed.\n     * @private\n     * @returns {boolean}\n     */\n\n  }, {\n    key: '_close',\n    value: function _close() {\n      if (this._peerConnection.signalingState !== 'closed') {\n        this._peerConnection.close();\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Handle a \"datachannel\" event.\n     * @private\n     * @param {RTCDataChannelEvent} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleDataChannelEvent',\n    value: function _handleDataChannelEvent(event) {\n      var _this5 = this;\n\n      var dataChannel = event.channel;\n      var dataTrackReceiver = new DataTrackReceiver(dataChannel);\n\n      this._dataTrackReceivers.add(dataTrackReceiver);\n\n      dataChannel.addEventListener('close', function () {\n        _this5._dataTrackReceivers.delete(dataTrackReceiver);\n      });\n      this.emit('trackAdded', dataTrackReceiver);\n    }\n    /**\n     * Handle a glare scenario on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_handleGlare',\n    value: function _handleGlare(offer) {\n      var _this6 = this;\n\n      this._log.debug('Glare detected; rolling back');\n\n      if (this._isRestartingIce) {\n        this._log.debug('An ICE restart was in progress; we\\'ll need to restart ICE again after rolling back');\n\n        this._isRestartingIce = false;\n        this._shouldRestartIce = true;\n      }\n\n      return Promise.resolve().then(function () {\n        _this6._trackIdsToAttributes = new Map(_this6._appliedTrackIdsToAttributes);\n        return _this6._setLocalDescription({\n          type: 'rollback'\n        });\n      }).then(function () {\n        _this6._needsAnswer = false;\n        return _this6._answer(offer);\n      }).then(function (didReoffer) {\n        return didReoffer ? Promise.resolve() : _this6._offer();\n      });\n    }\n    /**\n     * Handle an ICE candidate event.\n     * @private\n     * @param {Event} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceCandidateEvent',\n    value: function _handleIceCandidateEvent(event) {\n      if (event.candidate) {\n        this._localCandidates.push(event.candidate);\n      }\n\n      var peerConnectionState = {\n        ice: {\n          candidates: this._isIceLite ? [] : this._localCandidates.slice(),\n          ufrag: this._localUfrag\n        },\n        id: this.id\n      };\n\n      if (!event.candidate) {\n        peerConnectionState.ice.complete = true;\n      }\n\n      if (!(this._isIceLite && event.candidate)) {\n        peerConnectionState.ice.revision = this._localCandidatesRevision++;\n        this.emit('candidates', peerConnectionState);\n      }\n    }\n    /**\n     * Handle an ICE connection state change event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceConnectionStateChange',\n    value: function _handleIceConnectionStateChange() {\n      var _this7 = this;\n\n      var iceConnectionState = this._peerConnection.iceConnectionState;\n\n      this._log.debug('ICE connection state is \"' + iceConnectionState + '\"'); // Case 1: Transition to \"failed\".\n\n\n      if (this._lastIceConnectionState !== 'failed' && iceConnectionState === 'failed' && !this._shouldRestartIce && !this._isRestartingIce) {\n        this._log.warn('ICE failed; attempting to restart ICE');\n\n        this._shouldRestartIce = true;\n        this.offer(); // eslint-disable-next-line brace-style\n      } // Case 2: Transition from \"failed\".\n      else if (this._lastIceConnectionState === 'failed' && (iceConnectionState === 'connected' || iceConnectionState === 'completed')) {\n          this._log.info('ICE reconnected');\n        }\n\n      this._isIceConnectionInactive = false;\n\n      if (iceConnectionState === 'disconnected') {\n        this._iceConnectionMonitor.start(function () {\n          _this7._iceConnectionMonitor.stop();\n\n          if (!_this7._shouldRestartIce && !_this7._isRestartingIce) {\n            _this7._log.warn('ICE Connection Monitor detected inactivity; attempting to restart ICE');\n\n            _this7._shouldRestartIce = true;\n            _this7._isIceConnectionInactive = true;\n\n            _this7.offer();\n\n            _this7.emit('iceConnectionStateChanged');\n          }\n        });\n      } else {\n        this._iceConnectionMonitor.stop();\n      }\n\n      this._lastIceConnectionState = iceConnectionState;\n      this.emit('iceConnectionStateChanged');\n    }\n    /**\n     * Handle a signaling state change event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleSignalingStateChange',\n    value: function _handleSignalingStateChange() {\n      if (this._peerConnection.signalingState === 'stable') {\n        this._appliedTrackIdsToAttributes = new Map(this._trackIdsToAttributes);\n      } else if (this._peerConnection.signalingState === 'closed' && this.state !== 'closed') {\n        this.preempt('closed');\n      }\n    }\n    /**\n     * Handle a track event.\n     * @private\n     * @param {Event} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleTrackEvent',\n    value: function _handleTrackEvent(event) {\n      var _this8 = this;\n\n      var sdp = this._peerConnection.remoteDescription ? this._peerConnection.remoteDescription.sdp : null;\n\n      if (!this._trackMatcher) {\n        this._trackMatcher = event.transceiver && event.transceiver.mid ? new MIDTrackMatcher() // NOTE(mroberts): Until Chrome ships RTCRtpTransceivers with MID\n        // support, we have to use the same hacky solution as Safari. Revisit\n        // this when RTCRtpTransceivers and MIDs land. We should be able to use\n        // the same technique as Firefox.\n        : isSafari || this._isUnifiedPlan ? new OrderedTrackMatcher() : new IdentityTrackMatcher();\n      }\n\n      this._trackMatcher.update(sdp);\n\n      var mediaStreamTrack = event.track;\n      var signaledTrackId = this._trackMatcher.match(event) || mediaStreamTrack.id;\n      var mediaTrackReceiver = new MediaTrackReceiver(signaledTrackId, mediaStreamTrack); // NOTE(mmalavalli): In unified plan mode, \"ended\" is not fired on the remote\n      // MediaStreamTrack when the remote peer removes a track. So, when this\n      // MediaStreamTrack is re-used for a different track due to the remote peer\n      // calling RTCRtpSender.replaceTrack(), we delete the previous MediaTrackReceiver\n      // that owned this MediaStreamTrack before adding the new MediaTrackReceiver.\n\n      this._mediaTrackReceivers.forEach(function (trackReceiver) {\n        if (trackReceiver.track.id === mediaTrackReceiver.track.id) {\n          _this8._mediaTrackReceivers.delete(trackReceiver);\n        }\n      });\n\n      this._mediaTrackReceivers.add(mediaTrackReceiver);\n\n      mediaStreamTrack.addEventListener('ended', function () {\n        return _this8._mediaTrackReceivers.delete(mediaTrackReceiver);\n      });\n      this.emit('trackAdded', mediaTrackReceiver);\n    }\n    /**\n     * Conditionally re-offer.\n     * @private\n     * @param {?RTCSessionDescriptionInit} localDescription\n     * @returns {Promise<boolean>}\n     */\n\n  }, {\n    key: '_maybeReoffer',\n    value: function _maybeReoffer(localDescription) {\n      var shouldReoffer = this._shouldOffer;\n\n      if (localDescription && localDescription.sdp) {\n        // NOTE(mmalavalli): For \"unified-plan\" sdps, if the remote RTCPeerConnection sends\n        // an offer with fewer audio m= lines than the number of audio RTCRTPSenders\n        // in the local RTCPeerConnection, then the local RTCPeerConnection creates\n        // an answer with the same number of audio m= lines as in the offer. This\n        // behavior was triggered by the removal of 'offerToReceiveAudio' from the\n        // default RTCOfferOptions. Ideally, the local RTCPeerConnection should create\n        // an answer with the same number of audio m= lines as the number of\n        // RTCRTPSenders. In order to achieve this,the local RTCPeerConnection\n        // initiates renegotiation.\n        //\n        // We can reduce the number of cases where renegotiation is needed by\n        // re-introducing 'offerToReceiveAudio' to the default RTCOfferOptions with a\n        // value > 1.\n        if (this._isUnifiedPlan && localDescription.type === 'answer') {\n          var senders = this._peerConnection.getSenders().filter(function (sender) {\n            return sender.track;\n          });\n\n          shouldReoffer = ['audio', 'video'].reduce(function (shouldOffer, kind) {\n            var mediaSections = getMediaSections(localDescription.sdp, kind, '(sendrecv|sendonly)');\n            var sendersOfKind = senders.filter(isSenderOfKind.bind(null, kind));\n            return shouldOffer || mediaSections.length < sendersOfKind.length;\n          }, shouldReoffer);\n        } // NOTE(mroberts): We also need to re-offer if we have a DataTrack to share\n        // but no m= application section.\n\n\n        var hasDataTrack = this._dataChannels.size > 0;\n        var hasApplicationMediaSection = getMediaSections(localDescription.sdp, 'application').length > 0;\n        var needsApplicationMediaSection = hasDataTrack && !hasApplicationMediaSection;\n        shouldReoffer = shouldReoffer || needsApplicationMediaSection;\n      }\n\n      var promise = shouldReoffer ? this._offer() : Promise.resolve();\n      return promise.then(function () {\n        return shouldReoffer;\n      });\n    }\n    /**\n     * Create an offer and set it on the {@link PeerConnectionV2}.\n     * @private\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_offer',\n    value: function _offer() {\n      var _this9 = this;\n\n      var offerOptions = Object.assign({}, this._offerOptions);\n      this._needsAnswer = true;\n\n      if (this._shouldRestartIce) {\n        this._shouldRestartIce = false;\n        this._isRestartingIce = true;\n        offerOptions.iceRestart = true;\n      }\n\n      return Promise.all(this._replaceTrackPromises.values()).then(function () {\n        return _this9._peerConnection.createOffer(offerOptions);\n      }).catch(function () {\n        throw new MediaClientLocalDescFailedError();\n      }).then(function (offer) {\n        if (!isFirefox) {\n          offer = workaroundIssue8329(offer);\n        }\n\n        var sdp = _this9._isUnifiedPlan && _this9._peerConnection.remoteDescription ? unifiedPlanFilterLocalCodecs(offer.sdp, _this9._peerConnection.remoteDescription.sdp) : offer.sdp;\n\n        var updatedSdp = _this9._setCodecPreferences(sdp, _this9._preferredAudioCodecs, _this9._preferredVideoCodecs);\n\n        _this9._shouldOffer = false;\n\n        if (!_this9._negotiationRole) {\n          _this9._negotiationRole = 'offerer';\n        }\n\n        if (_this9._shouldApplySimulcast) {\n          _this9._localDescriptionWithoutSimulcast = {\n            type: 'offer',\n            sdp: updatedSdp\n          };\n          updatedSdp = _this9._setSimulcast(updatedSdp, _this9._sdpFormat, _this9._trackIdsToAttributes);\n        }\n\n        return _this9._setLocalDescription({\n          type: 'offer',\n          sdp: updatedSdp\n        });\n      });\n    }\n    /**\n     * Add or rewrite local MediaStreamTrack IDs in the given Unified Plan RTCSessionDescription.\n     * @private\n     * @param {RTCSessionDescription} description\n     * @return {RTCSessionDescription}\n     */\n\n  }, {\n    key: '_addOrRewriteLocalTrackIds',\n    value: function _addOrRewriteLocalTrackIds(description) {\n      var transceivers = this._peerConnection.getTransceivers();\n\n      var activeTransceivers = transceivers.filter(function (_ref) {\n        var sender = _ref.sender,\n            stopped = _ref.stopped;\n        return !stopped && sender && sender.track;\n      }); // NOTE(mmalavalli): There is no guarantee that MediaStreamTrack IDs will be present in\n      // SDPs, and even if they are, there is no guarantee that they will be the same as the\n      // actual MediaStreamTrack IDs. So, we add or re-write the actual MediaStreamTrack IDs\n      // to the assigned m= sections here.\n\n      var assignedTransceivers = activeTransceivers.filter(function (_ref2) {\n        var mid = _ref2.mid;\n        return mid;\n      });\n      var midsToTrackIds = new Map(assignedTransceivers.map(function (_ref3) {\n        var mid = _ref3.mid,\n            sender = _ref3.sender;\n        return [mid, sender.track.id];\n      }));\n      var sdp1 = unifiedPlanAddOrRewriteTrackIds(description.sdp, midsToTrackIds); // NOTE(mmalavalli): Chrome and Safari do not apply the offer until they get an answer.\n      // So, we add or re-write the actual MediaStreamTrack IDs to the unassigned m= sections here.\n\n      var unassignedTransceivers = activeTransceivers.filter(function (_ref4) {\n        var mid = _ref4.mid;\n        return !mid;\n      });\n      var newTrackIdsByKind = new Map(['audio', 'video'].map(function (kind) {\n        return [kind, unassignedTransceivers.filter(function (_ref5) {\n          var sender = _ref5.sender;\n          return sender.track.kind === kind;\n        }).map(function (_ref6) {\n          var sender = _ref6.sender;\n          return sender.track.id;\n        })];\n      }));\n      var sdp2 = unifiedPlanAddOrRewriteNewTrackIds(sdp1, midsToTrackIds, newTrackIdsByKind);\n      return new this._RTCSessionDescription({\n        sdp: sdp2,\n        type: description.type\n      });\n    }\n    /**\n     * Rollback and apply the given offer.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_rollbackAndApplyOffer',\n    value: function _rollbackAndApplyOffer(offer) {\n      var _this10 = this;\n\n      return this._setLocalDescription({\n        type: 'rollback'\n      }).then(function () {\n        return _this10._setLocalDescription(offer);\n      });\n    }\n    /**\n     * Set a local description on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescription|RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_setLocalDescription',\n    value: function _setLocalDescription(description) {\n      var _this11 = this;\n\n      return this._peerConnection.setLocalDescription(description).catch(function (error) {\n        _this11._log.warn('Calling setLocalDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\n\n        if (description.sdp) {\n          _this11._log.warn('The SDP was ' + description.sdp);\n        }\n\n        throw new MediaClientLocalDescFailedError();\n      }).then(function () {\n        if (description.type !== 'rollback') {\n          _this11._localDescription = _this11._isUnifiedPlan ? _this11._addOrRewriteLocalTrackIds(description) : description;\n          _this11._localCandidates = [];\n\n          if (description.type === 'offer') {\n            _this11._descriptionRevision++;\n          } else if (description.type === 'answer') {\n            _this11._lastStableDescriptionRevision = _this11._descriptionRevision;\n            negotiationCompleted(_this11);\n          }\n\n          _this11._localUfrag = getUfrag(description);\n\n          _this11.emit('description', _this11.getState());\n        }\n      });\n    }\n    /**\n     * Set a remote RTCSessionDescription on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_setRemoteDescription',\n    value: function _setRemoteDescription(description) {\n      var _this12 = this;\n\n      if (description.sdp) {\n        if (!this._isRTCRtpSenderParamsSupported) {\n          description.sdp = this._setBitrateParameters(description.sdp, isFirefox ? 'TIAS' : 'AS', this._encodingParameters.maxAudioBitrate, this._encodingParameters.maxVideoBitrate);\n        }\n\n        description.sdp = this._setCodecPreferences(description.sdp, this._preferredAudioCodecs, this._preferredVideoCodecs); // NOTE(mroberts): Do this to reduce our MediaStream count in Firefox. By\n        // mapping MediaStream IDs in the SDP to \"-\", we ensure the \"track\" event\n        // doesn't include any new MediaStreams in Firefox. Its `streams` member\n        // will always be the empty Array.\n\n        if (isFirefox) {\n          description.sdp = filterOutMediaStreamIds(description.sdp);\n        }\n\n        if (!this._peerConnection.remoteDescription) {\n          this._isIceLite = /a=ice-lite/.test(description.sdp);\n        }\n      }\n\n      description = new this._RTCSessionDescription(description); // eslint-disable-next-line consistent-return\n\n      return Promise.resolve().then(function () {\n        // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n        // unset simulcast for sections in local offer where corresponding\n        // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n        if (description.type === 'answer' && _this12._shouldApplySimulcast) {\n          var sdpWithoutSimulcastForNonVP8MediaSections = _this12._revertSimulcastForNonVP8MediaSections(_this12._localDescription.sdp, _this12._localDescriptionWithoutSimulcast.sdp, description.sdp);\n\n          if (sdpWithoutSimulcastForNonVP8MediaSections !== _this12._localDescription.sdp) {\n            return _this12._rollbackAndApplyOffer({\n              type: _this12._localDescription.type,\n              sdp: sdpWithoutSimulcastForNonVP8MediaSections\n            });\n          }\n        }\n      }).then(function () {\n        return _this12._peerConnection.setRemoteDescription(description);\n      }).then(function () {\n        if (description.type === 'answer') {\n          if (_this12._isRestartingIce) {\n            _this12._log.debug('An ICE restart was in-progress and is now completed');\n\n            _this12._isRestartingIce = false;\n          }\n\n          negotiationCompleted(_this12);\n        }\n      }, function (error) {\n        _this12._log.warn('Calling setRemoteDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\n\n        if (description.sdp) {\n          _this12._log.warn('The SDP was ' + description.sdp);\n        }\n\n        throw error;\n      });\n    }\n    /**\n     * Update the {@link PeerConnectionV2}'s description.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_updateDescription',\n    value: function _updateDescription(description) {\n      var _this13 = this;\n\n      switch (description.type) {\n        case 'answer':\n        case 'pranswer':\n          if (description.revision !== this._descriptionRevision || this._peerConnection.signalingState !== 'have-local-offer') {\n            return Promise.resolve();\n          }\n\n          this._descriptionRevision = description.revision;\n          break;\n\n        case 'close':\n          return this._close();\n\n        case 'create-offer':\n          if (description.revision <= this._lastStableDescriptionRevision) {\n            return Promise.resolve();\n          } else if (this._needsAnswer) {\n            this._queuedDescription = description;\n            return Promise.resolve();\n          }\n\n          this._descriptionRevision = description.revision;\n          return this._offer();\n\n        case 'offer':\n          if (description.revision <= this._lastStableDescriptionRevision || this._peerConnection.signalingState === 'closed') {\n            return Promise.resolve();\n          }\n\n          if (this._peerConnection.signalingState === 'have-local-offer') {\n            // NOTE(mpatwardhan): For a peer connection\n            // 1) createOffer always generate SDP with `setup:actpass`\n            // 2) when remote description is set `setup:active`  - the answer generated selects the dtls role of setup:passive\n            // 3) when remote description is set `setup:passive` - the answer generated selects the dtls role of setup:active\n            // 4) when remote description is set `setup:actpass` - the answer generated uses the previously negotiated role (if not negotiated previously setup:active is used)\n            // This test shows the  behavior: https://github.com/twilio/twilio-webrtc.js/blob/master/test/integration/spec/rtcpeerconnection.js#L936\n            // with glare handling (if dtls role was not negotiated before ) the generated answer will set setup:active.\n            // we do not want that. lets wait for \"initial negotiation\" before attempting glare handling.\n            if (this._needsAnswer && this._lastStableDescriptionRevision === 0) {\n              this._queuedDescription = description;\n              return Promise.resolve();\n            }\n\n            this._descriptionRevision = description.revision;\n            return this._handleGlare(description);\n          }\n\n          this._descriptionRevision = description.revision;\n          return this._answer(description).then(function () {});\n\n        default: // Do nothing.\n\n      } // Handle answer or pranswer.\n\n\n      var revision = description.revision;\n      return Promise.resolve().then(function () {\n        return _this13._setRemoteDescription(description);\n      }).catch(function () {\n        throw new MediaClientRemoteDescFailedError();\n      }).then(function () {\n        _this13._lastStableDescriptionRevision = revision;\n        _this13._needsAnswer = false;\n        return _this13._checkIceBox(description);\n      }).then(function () {\n        return _this13._queuedDescription && _this13._updateDescription(_this13._queuedDescription);\n      }).then(function () {\n        _this13._queuedDescription = null;\n        return _this13._maybeReoffer(_this13._peerConnection.localDescription).then(function () {});\n      });\n    }\n    /**\n     * Update the {@link PeerConnectionV2}'s ICE candidates.\n     * @private\n     * @param {object} iceState\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_updateIce',\n    value: function _updateIce(iceState) {\n      var candidates = this._remoteCandidates.update(iceState);\n\n      return this._addIceCandidates(candidates);\n    }\n    /**\n     * Add a {@link DataTrackSender} to the {@link PeerConnectionV2}.\n     * @param {DataTrackSender} dataTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addDataTrackSender',\n    value: function addDataTrackSender(dataTrackSender) {\n      if (this._dataChannels.has(dataTrackSender)) {\n        return;\n      }\n\n      try {\n        var dataChannelDict = {\n          ordered: dataTrackSender.ordered\n        };\n\n        if (dataTrackSender.maxPacketLifeTime !== null) {\n          dataChannelDict.maxPacketLifeTime = dataTrackSender.maxPacketLifeTime;\n        }\n\n        if (dataTrackSender.maxRetransmits !== null) {\n          dataChannelDict.maxRetransmits = dataTrackSender.maxRetransmits;\n        }\n\n        var dataChannel = this._peerConnection.createDataChannel(dataTrackSender.id, dataChannelDict);\n\n        dataTrackSender.addDataChannel(dataChannel);\n\n        this._dataChannels.set(dataTrackSender, dataChannel);\n      } catch (error) {// Do nothing.\n      }\n    }\n    /**\n     * Add the {@link MediaTrackSender} to the {@link PeerConnectionV2}.\n     * @param {MediaTrackSender} mediaTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addMediaTrackSender',\n    value: function addMediaTrackSender(mediaTrackSender) {\n      if (this._peerConnection.signalingState === 'closed' || this._rtpSenders.has(mediaTrackSender)) {\n        return;\n      }\n\n      var sender = void 0;\n\n      if (this._localMediaStream) {\n        this._localMediaStream.addTrack(mediaTrackSender.track);\n\n        sender = this._peerConnection.addTrack(mediaTrackSender.track, this._localMediaStream);\n      } else {\n        var transceiver = this._addOrUpdateTransceiver(mediaTrackSender.track);\n\n        sender = transceiver.sender;\n      }\n\n      mediaTrackSender.addSender(sender);\n\n      this._rtpSenders.set(mediaTrackSender, sender);\n    }\n    /**\n     * Close the {@link PeerConnectionV2}.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this._close()) {\n        this._descriptionRevision++;\n        this._localDescription = {\n          type: 'close'\n        };\n        this.emit('description', this.getState());\n      }\n    }\n    /**\n     * Get the {@link DataTrackReceiver}s and the {@link MediaTrackReceivers} on the\n     * {@link PeerConnectionV2}.\n     * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\n     */\n\n  }, {\n    key: 'getTrackReceivers',\n    value: function getTrackReceivers() {\n      return Array.from(this._dataTrackReceivers).concat(Array.from(this._mediaTrackReceivers));\n    }\n    /**\n     * Get the {@link PeerConnectionV2}'s state (specifically, its description).\n     * @returns {?object}\n     */\n\n  }, {\n    key: 'getState',\n    value: function getState() {\n      if (!this._localDescription) {\n        return null;\n      }\n\n      var localDescription = {\n        type: this._localDescription.type,\n        revision: this._descriptionRevision\n      };\n\n      if (this._localDescription.sdp) {\n        localDescription.sdp = this._localDescription.sdp;\n      }\n\n      return {\n        description: localDescription,\n        id: this.id\n      };\n    }\n    /**\n     * Create an offer and set it on the {@link PeerConnectionV2}.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'offer',\n    value: function offer() {\n      var _this14 = this;\n\n      if (this._needsAnswer || this._isRestartingIce) {\n        this._shouldOffer = true;\n        return Promise.resolve();\n      }\n\n      return this.bracket('offering', function (key) {\n        _this14.transition('updating', key);\n\n        var promise = _this14._needsAnswer || _this14._isRestartingIce ? Promise.resolve() : _this14._offer();\n        return promise.then(function () {\n          _this14.tryTransition('open', key);\n        }, function (error) {\n          _this14.tryTransition('open', key);\n\n          throw error;\n        });\n      });\n    }\n    /**\n     * Remove a {@link DataTrackSender} from the {@link PeerConnectionV2}.\n     * @param {DataTrackSender} dataTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'removeDataTrackSender',\n    value: function removeDataTrackSender(dataTrackSender) {\n      var dataChannel = this._dataChannels.get(dataTrackSender);\n\n      if (dataChannel) {\n        dataTrackSender.removeDataChannel(dataChannel);\n\n        this._dataChannels.delete(dataTrackSender);\n\n        dataChannel.close();\n      }\n    }\n    /**\n     * Remove the {@link MediaTrackSender} from the {@link PeerConnectionV2}.\n     * @param {MediaTrackSender} mediaTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'removeMediaTrackSender',\n    value: function removeMediaTrackSender(mediaTrackSender) {\n      if (this._peerConnection.signalingState === 'closed' || !this._rtpSenders.has(mediaTrackSender)) {\n        return;\n      }\n\n      var sender = this._rtpSenders.get(mediaTrackSender);\n\n      this._peerConnection.removeTrack(sender);\n\n      if (this._localMediaStream) {\n        this._localMediaStream.removeTrack(mediaTrackSender.track);\n      }\n\n      mediaTrackSender.removeSender(sender);\n\n      this._rtpSenders.delete(mediaTrackSender);\n    }\n    /**\n     * Set the RTCConfiguration on the underlying RTCPeerConnection.\n     * @param {RTCConfiguration} configuration\n     * @returns {void}\n     */\n\n  }, {\n    key: 'setConfiguration',\n    value: function setConfiguration(configuration) {\n      if (typeof this._peerConnection.setConfiguration === 'function') {\n        this._peerConnection.setConfiguration(getConfiguration(configuration));\n      }\n    }\n    /**\n     * Update the {@link PeerConnectionV2}.\n     * @param {object} peerConnectionState\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(peerConnectionState) {\n      var _this15 = this;\n\n      return this.bracket('updating', function (key) {\n        if (_this15.state === 'closed') {\n          return Promise.resolve();\n        }\n\n        _this15.transition('updating', key);\n\n        var updates = [];\n\n        if (peerConnectionState.ice) {\n          updates.push(_this15._updateIce(peerConnectionState.ice));\n        }\n\n        if (peerConnectionState.description) {\n          updates.push(_this15._updateDescription(peerConnectionState.description));\n        }\n\n        return Promise.all(updates).then(function () {\n          _this15.tryTransition('open', key);\n        }, function (error) {\n          _this15.tryTransition('open', key);\n\n          throw error;\n        });\n      });\n    }\n    /**\n     * Get the {@link PeerConnectionV2}'s media statistics.\n     * @returns {Promise<StandardizedStatsResponse>}\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var _this16 = this;\n\n      return getStatistics(this._peerConnection).then(function (response) {\n        return rewriteTrackIds(_this16, response);\n      });\n    }\n  }, {\n    key: 'iceConnectionState',\n    get: function get() {\n      return this._isIceConnectionInactive && this._peerConnection.iceConnectionState === 'disconnected' ? 'failed' : this._peerConnection.iceConnectionState;\n    }\n    /**\n     * Whether the {@link PeerConnectionV2} has negotiated or is in the process\n     * of negotiating the application m= section.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isApplicationSectionNegotiated',\n    get: function get() {\n      return this._peerConnection.localDescription ? getMediaSections(this._peerConnection.localDescription.sdp, 'application').length > 0 : false;\n    }\n  }]);\n\n  return PeerConnectionV2;\n}(StateMachine);\n\nfunction rewriteTrackId(pcv2, stats) {\n  var receiver = [].concat(_toConsumableArray(pcv2._mediaTrackReceivers)).find(function (receiver) {\n    return receiver.track.id === stats.trackId;\n  });\n  var trackId = receiver ? receiver.id : null;\n  return Object.assign(stats, {\n    trackId: trackId\n  });\n}\n\nfunction rewriteTrackIds(pcv2, response) {\n  return Object.assign(response, {\n    remoteAudioTrackStats: response.remoteAudioTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    }),\n    remoteVideoTrackStats: response.remoteVideoTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    })\n  });\n}\n/**\n * @event PeerConnectionV2#candidates\n * @param {object} candidates\n */\n\n/**\n * @event PeerConnectionV2#description\n * @param {object} description\n */\n\n/**\n * @event PeerConnectionV2#iceConnectionStateChanged\n */\n\n/**\n * @event PeerConnectionV2#trackAdded\n * @param {DataTrackReceiver|MediaTrackReceiver} trackReceiver\n */\n\n\nfunction getUfrag(description) {\n  if (description.sdp) {\n    var match = description.sdp.match(/^a=ice-ufrag:([a-zA-Z0-9+/]+)/m);\n\n    if (match) {\n      return match[1];\n    }\n  }\n\n  return null;\n}\n\nfunction getConfiguration(configuration) {\n  return Object.assign({\n    bundlePolicy: 'max-bundle',\n    rtcpMuxPolicy: 'require'\n  }, configuration);\n}\n/**\n * Whether the MediaStreamTrack of the given RTCRTPSender is a non-ended\n * MediaStreamTrack of a given kind.\n * @private\n * @param {string} kind\n * @param {RTCRtpSender} sender\n * @return {boolean}\n */\n\n\nfunction isSenderOfKind(kind, sender) {\n  var track = sender.track;\n  return track && track.kind === kind && track.readyState !== 'ended';\n}\n/**\n * Preferred codecs.\n * @typedef {object} PreferredCodecs\n * @property {Array<AudioCodec>} audio\n * @property {Array<VideoCodec>} video\n */\n\n\nfunction filterOutMediaStreamIds(sdp) {\n  return sdp.replace(/a=msid:[^ ]+ /g, 'a=msid:- ');\n}\n/**\n * Whether an RTCRtpTransceiver can be recycled.\n * @param {RTCRtpTransceiver} transceiver\n * @returns {boolean}\n */\n\n\nfunction shouldRecycleTransceiver(transceiver, pcv2) {\n  return !transceiver.stopped && !pcv2._replaceTrackPromises.has(transceiver) && (transceiver.currentDirection === 'inactive' || transceiver.currentDirection === 'recvonly' || transceiver.direction === 'recvonly');\n}\n/**\n * Take a recycled RTCRtpTransceiver if available.\n * @param {PeerConnectionV2} pcv2\n * @param {Track.Kind} kind\n * @returns {?RTCRtpTransceiver}\n */\n\n\nfunction takeRecycledTransceiver(pcv2, kind) {\n  var preferredCodecs = {\n    audio: pcv2._preferredAudioCodecs.map(function (codec) {\n      return codec.toLowerCase();\n    }),\n    video: pcv2._preferredVideoCodecs.map(function (_ref7) {\n      var codec = _ref7.codec;\n      return codec.toLowerCase();\n    })\n  }[kind];\n  var recycledTransceivers = pcv2._recycledTransceivers[kind];\n  var localCodec = preferredCodecs.find(function (codec) {\n    return pcv2._localCodecs.has(codec);\n  });\n\n  if (!localCodec) {\n    return recycledTransceivers.shift();\n  }\n\n  var transceiver = recycledTransceivers.find(function (transceiver) {\n    var remoteCodecMap = pcv2._remoteCodecMaps.get(transceiver.mid);\n\n    return remoteCodecMap && remoteCodecMap.has(localCodec);\n  });\n\n  if (transceiver) {\n    recycledTransceivers.splice(recycledTransceivers.indexOf(transceiver), 1);\n  }\n\n  return transceiver;\n}\n/**\n * Update the set of locally supported {@link Codec}s.\n * @param pcv2\n * @returns {void}\n */\n\n\nfunction updateLocalCodecs(pcv2) {\n  var description = pcv2._peerConnection.localDescription;\n\n  if (!description) {\n    return;\n  }\n\n  getMediaSections(description.sdp).forEach(function (section) {\n    var codecMap = createCodecMapForMediaSection(section);\n    codecMap.forEach(function (pts, codec) {\n      return pcv2._localCodecs.add(codec);\n    });\n  });\n}\n/**\n * Update the {@link Codec} maps for all m= sections in the remote {@link RTCSessionDescription}s.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\n\n\nfunction updateRemoteCodecMaps(pcv2) {\n  var description = pcv2._peerConnection.remoteDescription;\n\n  if (!description) {\n    return;\n  }\n\n  getMediaSections(description.sdp).forEach(function (section) {\n    var mid = section.match(/^a=mid:(.+)$/m)[1];\n    var codecMap = createCodecMapForMediaSection(section);\n\n    pcv2._remoteCodecMaps.set(mid, codecMap);\n  });\n}\n/**\n * Update the list of recycled RTCRtpTransceivers.\n * @param {PeerConnectionV2} pcv2\n */\n\n\nfunction updateRecycledTransceivers(pcv2) {\n  pcv2._recycledTransceivers.audio = [];\n  pcv2._recycledTransceivers.video = [];\n\n  pcv2._peerConnection.getTransceivers().forEach(function (transceiver) {\n    if (shouldRecycleTransceiver(transceiver, pcv2)) {\n      var track = transceiver.receiver.track;\n\n      pcv2._recycledTransceivers[track.kind].push(transceiver);\n    }\n  });\n}\n/**\n * Perform certain updates after an SDP negotiation is completed.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\n\n\nfunction negotiationCompleted(pcv2) {\n  if (pcv2._isUnifiedPlan) {\n    updateRecycledTransceivers(pcv2);\n    updateLocalCodecs(pcv2);\n    updateRemoteCodecMaps(pcv2);\n  }\n\n  if (pcv2._isRTCRtpSenderParamsSupported) {\n    updateEncodingParameters(pcv2);\n  }\n}\n/**\n * Update the RTCRtpEncodingParameters of all active RTCRtpSenders.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\n\n\nfunction updateEncodingParameters(pcv2) {\n  var _pcv2$_encodingParame = pcv2._encodingParameters,\n      maxAudioBitrate = _pcv2$_encodingParame.maxAudioBitrate,\n      maxVideoBitrate = _pcv2$_encodingParame.maxVideoBitrate;\n  var maxBitrates = new Map([['audio', maxAudioBitrate], ['video', maxVideoBitrate]]);\n\n  pcv2._peerConnection.getSenders().filter(function (sender) {\n    return sender.track;\n  }).forEach(function (sender) {\n    var maxBitrate = maxBitrates.get(sender.track.kind);\n    var params = sender.getParameters();\n\n    if (maxBitrate === null || maxBitrate === 0) {\n      removeMaxBitrate(params);\n    } else if (utils.isChromeScreenShareTrack(sender.track)) {\n      // NOTE(mpatwardhan): Sometimes (JSDK-2557) chrome does not send any bytes on screen track if MaxBitRate is set on it via setParameters,\n      // To workaround this issue we will not apply maxBitrate if the track appears to be a screen share track created by chrome\n      pcv2._log.warn('Not setting maxBitrate for ' + sender.track.kind + ' Track ' + sender.track.id + ' because it appears to be screen share track: ' + sender.track.label);\n    } else {\n      setMaxBitrate(params, maxBitrate);\n    }\n\n    if (!isFirefox && pcv2._enableDscp && params.encodings.length > 0) {\n      // NOTE(mmalavalli): \"networkPriority\" is a per-sender property and not\n      // a per-encoding-layer property. So, we set the value only on the first\n      // encoding layer. Any attempt to set the value on subsequent encoding\n      // layers (in the case of simulcast) will result in the Promise returned\n      // by RTCRtpSender.setParameters() being rejected.\n      params.encodings[0].networkPriority = 'high';\n    }\n\n    sender.setParameters(params).catch(function (error) {\n      pcv2._log.warn('Error while setting encodings parameters for ' + sender.track.kind + ' Track ' + sender.track.id + ': ' + (error.message || error.name));\n    });\n  });\n}\n/**\n * Remove maxBitrate from the RTCRtpSendParameters' encodings.\n * @param {RTCRtpSendParameters} params\n * @returns {void}\n */\n\n\nfunction removeMaxBitrate(params) {\n  if (Array.isArray(params.encodings)) {\n    params.encodings.forEach(function (encoding) {\n      return delete encoding.maxBitrate;\n    });\n  }\n}\n/**\n * Set the given maxBitrate in the RTCRtpSendParameters' encodings.\n * @param {RTCRtpSendParameters} params\n * @param {number} maxBitrate\n * @returns {void}\n */\n\n\nfunction setMaxBitrate(params, maxBitrate) {\n  if (isFirefox) {\n    params.encodings = [{\n      maxBitrate: maxBitrate\n    }];\n  } else {\n    params.encodings.forEach(function (encoding) {\n      encoding.maxBitrate = maxBitrate;\n    });\n  }\n}\n\nmodule.exports = PeerConnectionV2;","map":{"version":3,"sources":["/Users/chris/Desktop/call-me/client/node_modules/twilio-video/es5/signaling/v2/peerconnection.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_toConsumableArray","arr","Array","isArray","arr2","from","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","_require","require","DefaultMediaStream","MediaStream","DefaultRTCIceCandidate","RTCIceCandidate","DefaultRTCPeerConnection","RTCPeerConnection","DefaultRTCSessionDescription","RTCSessionDescription","getStatistics","getStats","_require2","guessBrowser","_require3","getSdpFormat","_require4","DEFAULT_LOG_LEVEL","_require5","createCodecMapForMediaSection","getMediaSections","revertSimulcastForNonVP8MediaSections","setBitrateParameters","setCodecPreferences","setSimulcast","unifiedPlanAddOrRewriteNewTrackIds","unifiedPlanAddOrRewriteTrackIds","unifiedPlanFilterLocalCodecs","_require6","MediaClientLocalDescFailedError","MediaClientRemoteDescFailedError","utils","buildLogLevels","makeUUID","oncePerTick","IceBox","DefaultIceConnectionMonitor","DataTrackReceiver","MediaTrackReceiver","StateMachine","Log","IdentityTrackMatcher","OrderedTrackMatcher","MIDTrackMatcher","workaroundIssue8329","guess","isChrome","isFirefox","isSafari","firefoxMajorVersion","parseInt","navigator","userAgent","match","isRTCRtpSenderParamsSupported","RTCRtpSender","getParameters","setParameters","nInstances","states","open","updating","closed","PeerConnectionV2","_StateMachine","id","encodingParameters","preferredCodecs","options","_this","getPrototypeOf","assign","enableDscp","dummyAudioMediaStreamTrack","iceServers","logLevel","offerOptions","IceConnectionMonitor","configuration","getConfiguration","sdpFormat","sdpSemantics","isUnifiedPlan","localMediaStream","logLevels","chromeSpecificConstraints","optional","push","googDscp","peerConnection","addTrack","createDataChannel","_appliedTrackIdsToAttributes","Map","_dataChannels","_dataTrackReceivers","Set","_descriptionRevision","_enableDscp","_encodingParameters","_instanceId","_isIceConnectionInactive","_isIceLite","_isRestartingIce","_isUnifiedPlan","_isRTCRtpSenderParamsSupported","_lastIceConnectionState","_lastStableDescriptionRevision","_localCandidates","_localCodecs","_localCandidatesRevision","_localDescriptionWithoutSimulcast","_localDescription","_localMediaStream","_localUfrag","_log","log","createLog","_remoteCodecMaps","_rtpSenders","_iceConnectionMonitor","_mediaTrackReceivers","_needsAnswer","_negotiationRole","_offerOptions","_peerConnection","_preferredAudioCodecs","audio","_preferredVideoCodecs","video","_shouldApplySimulcast","some","codecSettings","codec","toLowerCase","simulcast","_queuedDescription","_recycledTransceivers","_replaceTrackPromises","_remoteCandidates","_sdpFormat","_setBitrateParameters","_setCodecPreferences","_setSimulcast","_revertSimulcastForNonVP8MediaSections","_RTCIceCandidate","_RTCPeerConnection","_RTCSessionDescription","_shouldOffer","_shouldRestartIce","_trackIdsToAttributes","_trackMatcher","on","updateEncodingParameters","offer","addEventListener","_handleDataChannelEvent","bind","_handleIceCandidateEvent","_handleIceConnectionStateChange","_handleSignalingStateChange","_handleTrackEvent","stateChanged","state","removeListener","forEach","dataChannel","dataTrackSender","removeDataTrackSender","toString","_addIceCandidate","candidate","_this2","Promise","resolve","then","addIceCandidate","catch","error","warn","message","_addIceCandidates","candidates","all","map","_addOrUpdateTransceiver","track","_this3","transceiver","takeRecycledTransceiver","kind","sender","oldTrackId","mid","set","replaceTrack","direction","finally","delete","addTransceiver","_checkIceBox","description","ufrag","getUfrag","setUfrag","_answer","_this4","_setRemoteDescription","createAnswer","answer","updatedSdp","sdp","type","_setLocalDescription","_updateDescription","_maybeReoffer","localDescription","_close","signalingState","close","event","_this5","channel","dataTrackReceiver","add","emit","_handleGlare","_this6","debug","didReoffer","_offer","peerConnectionState","ice","slice","complete","revision","_this7","iceConnectionState","info","start","stop","preempt","_this8","remoteDescription","update","mediaStreamTrack","signaledTrackId","mediaTrackReceiver","trackReceiver","shouldReoffer","senders","getSenders","filter","reduce","shouldOffer","mediaSections","sendersOfKind","isSenderOfKind","hasDataTrack","size","hasApplicationMediaSection","needsApplicationMediaSection","promise","_this9","iceRestart","values","createOffer","_addOrRewriteLocalTrackIds","transceivers","getTransceivers","activeTransceivers","_ref","stopped","assignedTransceivers","_ref2","midsToTrackIds","_ref3","sdp1","unassignedTransceivers","_ref4","newTrackIdsByKind","_ref5","_ref6","sdp2","_rollbackAndApplyOffer","_this10","_this11","setLocalDescription","negotiationCompleted","getState","_this12","maxAudioBitrate","maxVideoBitrate","filterOutMediaStreamIds","test","sdpWithoutSimulcastForNonVP8MediaSections","setRemoteDescription","_this13","_updateIce","iceState","addDataTrackSender","has","dataChannelDict","ordered","maxPacketLifeTime","maxRetransmits","addDataChannel","addMediaTrackSender","mediaTrackSender","addSender","getTrackReceivers","concat","_this14","bracket","transition","tryTransition","get","removeDataChannel","removeMediaTrackSender","removeTrack","removeSender","setConfiguration","_this15","updates","_this16","response","rewriteTrackIds","rewriteTrackId","pcv2","stats","receiver","find","trackId","remoteAudioTrackStats","remoteVideoTrackStats","bundlePolicy","rtcpMuxPolicy","readyState","replace","shouldRecycleTransceiver","currentDirection","_ref7","recycledTransceivers","localCodec","shift","remoteCodecMap","splice","indexOf","updateLocalCodecs","section","codecMap","pts","updateRemoteCodecMaps","updateRecycledTransceivers","_pcv2$_encodingParame","maxBitrates","maxBitrate","params","removeMaxBitrate","isChromeScreenShareTrack","label","setMaxBitrate","encodings","networkPriority","name","encoding","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAG,YAAY;AAAE,WAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,KAAlC,EAAyC;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAE,UAAIE,UAAU,GAAGH,KAAK,CAACC,CAAD,CAAtB;AAA2BE,MAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,MAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AAAgC,UAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAA4BC,MAAAA,MAAM,CAACC,cAAP,CAAsBT,MAAtB,EAA8BI,UAAU,CAACM,GAAzC,EAA8CN,UAA9C;AAA4D;AAAE;;AAAC,SAAO,UAAUO,WAAV,EAAuBC,UAAvB,EAAmCC,WAAnC,EAAgD;AAAE,QAAID,UAAJ,EAAgBb,gBAAgB,CAACY,WAAW,CAACG,SAAb,EAAwBF,UAAxB,CAAhB;AAAqD,QAAIC,WAAJ,EAAiBd,gBAAgB,CAACY,WAAD,EAAcE,WAAd,CAAhB;AAA4C,WAAOF,WAAP;AAAqB,GAAhN;AAAmN,CAA9hB,EAAnB;;AAEA,SAASI,kBAAT,CAA4BC,GAA5B,EAAiC;AAAE,MAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AAAE,SAAK,IAAId,CAAC,GAAG,CAAR,EAAWiB,IAAI,GAAGF,KAAK,CAACD,GAAG,CAACb,MAAL,CAA5B,EAA0CD,CAAC,GAAGc,GAAG,CAACb,MAAlD,EAA0DD,CAAC,EAA3D,EAA+D;AAAEiB,MAAAA,IAAI,CAACjB,CAAD,CAAJ,GAAUc,GAAG,CAACd,CAAD,CAAb;AAAmB;;AAAC,WAAOiB,IAAP;AAAc,GAA7H,MAAmI;AAAE,WAAOF,KAAK,CAACG,IAAN,CAAWJ,GAAX,CAAP;AAAyB;AAAE;;AAEnM,SAASK,eAAT,CAAyBC,QAAzB,EAAmCX,WAAnC,EAAgD;AAAE,MAAI,EAAEW,QAAQ,YAAYX,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIY,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,SAASC,0BAAT,CAAoCC,IAApC,EAA0CC,IAA1C,EAAgD;AAAE,MAAI,CAACD,IAAL,EAAW;AAAE,UAAM,IAAIE,cAAJ,CAAmB,2DAAnB,CAAN;AAAwF;;AAAC,SAAOD,IAAI,KAAK,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,UAAjD,CAAJ,GAAmEA,IAAnE,GAA0ED,IAAjF;AAAwF;;AAEhP,SAASG,SAAT,CAAmBC,QAAnB,EAA6BC,UAA7B,EAAyC;AAAE,MAAI,OAAOA,UAAP,KAAsB,UAAtB,IAAoCA,UAAU,KAAK,IAAvD,EAA6D;AAAE,UAAM,IAAIP,SAAJ,CAAc,6DAA6D,OAAOO,UAAlF,CAAN;AAAsG;;AAACD,EAAAA,QAAQ,CAACf,SAAT,GAAqBN,MAAM,CAACuB,MAAP,CAAcD,UAAU,IAAIA,UAAU,CAAChB,SAAvC,EAAkD;AAAEkB,IAAAA,WAAW,EAAE;AAAEC,MAAAA,KAAK,EAAEJ,QAAT;AAAmBxB,MAAAA,UAAU,EAAE,KAA/B;AAAsCE,MAAAA,QAAQ,EAAE,IAAhD;AAAsDD,MAAAA,YAAY,EAAE;AAApE;AAAf,GAAlD,CAArB;AAAqK,MAAIwB,UAAJ,EAAgBtB,MAAM,CAAC0B,cAAP,GAAwB1B,MAAM,CAAC0B,cAAP,CAAsBL,QAAtB,EAAgCC,UAAhC,CAAxB,GAAsED,QAAQ,CAACM,SAAT,GAAqBL,UAA3F;AAAwG;;AAE9e,IAAIM,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAtB;AAAA,IACIC,kBAAkB,GAAGF,QAAQ,CAACG,WADlC;AAAA,IAEIC,sBAAsB,GAAGJ,QAAQ,CAACK,eAFtC;AAAA,IAGIC,wBAAwB,GAAGN,QAAQ,CAACO,iBAHxC;AAAA,IAIIC,4BAA4B,GAAGR,QAAQ,CAACS,qBAJ5C;AAAA,IAKIC,aAAa,GAAGV,QAAQ,CAACW,QAL7B;;AAOA,IAAIC,SAAS,GAAGX,OAAO,CAAC,yBAAD,CAAvB;AAAA,IACIY,YAAY,GAAGD,SAAS,CAACC,YAD7B;;AAGA,IAAIC,SAAS,GAAGb,OAAO,CAAC,6BAAD,CAAvB;AAAA,IACIc,YAAY,GAAGD,SAAS,CAACC,YAD7B;;AAGA,IAAIC,SAAS,GAAGf,OAAO,CAAC,sBAAD,CAAvB;AAAA,IACIgB,iBAAiB,GAAGD,SAAS,CAACC,iBADlC;;AAGA,IAAIC,SAAS,GAAGjB,OAAO,CAAC,gBAAD,CAAvB;AAAA,IACIkB,6BAA6B,GAAGD,SAAS,CAACC,6BAD9C;AAAA,IAEIC,gBAAgB,GAAGF,SAAS,CAACE,gBAFjC;AAAA,IAGIC,qCAAqC,GAAGH,SAAS,CAACG,qCAHtD;AAAA,IAIIC,oBAAoB,GAAGJ,SAAS,CAACI,oBAJrC;AAAA,IAKIC,mBAAmB,GAAGL,SAAS,CAACK,mBALpC;AAAA,IAMIC,YAAY,GAAGN,SAAS,CAACM,YAN7B;AAAA,IAOIC,kCAAkC,GAAGP,SAAS,CAACO,kCAPnD;AAAA,IAQIC,+BAA+B,GAAGR,SAAS,CAACQ,+BARhD;AAAA,IASIC,4BAA4B,GAAGT,SAAS,CAACS,4BAT7C;;AAWA,IAAIC,SAAS,GAAG3B,OAAO,CAAC,gCAAD,CAAvB;AAAA,IACI4B,+BAA+B,GAAGD,SAAS,CAACC,+BADhD;AAAA,IAEIC,gCAAgC,GAAGF,SAAS,CAACE,gCAFjD;;AAIA,IAAIC,KAAK,GAAG9B,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAI+B,cAAc,GAAGD,KAAK,CAACC,cAA3B;AAAA,IACIC,QAAQ,GAAGF,KAAK,CAACE,QADrB;AAAA,IAEIC,WAAW,GAAGH,KAAK,CAACG,WAFxB;;AAKA,IAAIC,MAAM,GAAGlC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAImC,2BAA2B,GAAGnC,OAAO,CAAC,2BAAD,CAAzC;;AACA,IAAIoC,iBAAiB,GAAGpC,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAIqC,kBAAkB,GAAGrC,OAAO,CAAC,4BAAD,CAAhC;;AACA,IAAIsC,YAAY,GAAGtC,OAAO,CAAC,oBAAD,CAA1B;;AACA,IAAIuC,GAAG,GAAGvC,OAAO,CAAC,gBAAD,CAAjB;;AACA,IAAIwC,oBAAoB,GAAGxC,OAAO,CAAC,sCAAD,CAAlC;;AACA,IAAIyC,mBAAmB,GAAGzC,OAAO,CAAC,qCAAD,CAAjC;;AACA,IAAI0C,eAAe,GAAG1C,OAAO,CAAC,iCAAD,CAA7B;;AACA,IAAI2C,mBAAmB,GAAG3C,OAAO,CAAC,0BAAD,CAAjC;;AAEA,IAAI4C,KAAK,GAAGhC,YAAY,EAAxB;AACA,IAAIiC,QAAQ,GAAGD,KAAK,KAAK,QAAzB;AACA,IAAIE,SAAS,GAAGF,KAAK,KAAK,SAA1B;AACA,IAAIG,QAAQ,GAAGH,KAAK,KAAK,QAAzB;AAEA,IAAII,mBAAmB,GAAGF,SAAS,GAAGG,QAAQ,CAACC,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,gBAA1B,EAA4C,CAA5C,CAAD,EAAiD,EAAjD,CAAX,GAAkE,IAArG;AAEA,IAAIC,6BAA6B,GAAG,OAAOC,YAAP,KAAwB,WAAxB,IAAuC,OAAOA,YAAY,CAAC7E,SAAb,CAAuB8E,aAA9B,KAAgD,UAAvF,IAAqG,OAAOD,YAAY,CAAC7E,SAAb,CAAuB+E,aAA9B,KAAgD,UAAzL;AAEA,IAAIC,UAAU,GAAG,CAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAIC,MAAM,GAAG;AACXC,EAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,UAAX,CADK;AAEXC,EAAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,MAAX,CAFC;AAGXC,EAAAA,MAAM,EAAE;AAHG,CAAb;AAMA;;;;;;;;AAQA,IAAIC,gBAAgB,GAAG,UAAUC,aAAV,EAAyB;AAC9CxE,EAAAA,SAAS,CAACuE,gBAAD,EAAmBC,aAAnB,CAAT;AAEA;;;;;;;;;AAOA,WAASD,gBAAT,CAA0BE,EAA1B,EAA8BC,kBAA9B,EAAkDC,eAAlD,EAAmEC,OAAnE,EAA4E;AAC1EnF,IAAAA,eAAe,CAAC,IAAD,EAAO8E,gBAAP,CAAf;;AAEA,QAAIM,KAAK,GAAGjF,0BAA0B,CAAC,IAAD,EAAO,CAAC2E,gBAAgB,CAAChE,SAAjB,IAA8B3B,MAAM,CAACkG,cAAP,CAAsBP,gBAAtB,CAA/B,EAAwEzE,IAAxE,CAA6E,IAA7E,EAAmF,MAAnF,EAA2FqE,MAA3F,CAAP,CAAtC;;AAEAS,IAAAA,OAAO,GAAGhG,MAAM,CAACmG,MAAP,CAAc;AACtBC,MAAAA,UAAU,EAAE,KADU;AAEtBC,MAAAA,0BAA0B,EAAE,IAFN;AAGtBC,MAAAA,UAAU,EAAE,EAHU;AAItBpB,MAAAA,6BAA6B,EAAEA,6BAJT;AAKtBqB,MAAAA,QAAQ,EAAE1D,iBALY;AAMtB2D,MAAAA,YAAY,EAAE,EANQ;AAOtBvD,MAAAA,qCAAqC,EAAEA,qCAPjB;AAQtBC,MAAAA,oBAAoB,EAAEA,oBARA;AAStBC,MAAAA,mBAAmB,EAAEA,mBATC;AAUtBC,MAAAA,YAAY,EAAEA,YAVQ;AAWtBqD,MAAAA,oBAAoB,EAAEzC,2BAXA;AAYtBjC,MAAAA,WAAW,EAAED,kBAZS;AAatBG,MAAAA,eAAe,EAAED,sBAbK;AActBG,MAAAA,iBAAiB,EAAED,wBAdG;AAetBG,MAAAA,qBAAqB,EAAED;AAfD,KAAd,EAgBP4D,OAhBO,CAAV;AAkBA,QAAIU,aAAa,GAAGC,gBAAgB,CAACX,OAAD,CAApC;AACA,QAAIY,SAAS,GAAGjE,YAAY,CAAC+D,aAAa,CAACG,YAAf,CAA5B;AACA,QAAIC,aAAa,GAAGF,SAAS,KAAK,SAAlC;AAEA,QAAIG,gBAAgB,GAAGD,aAAa,GAAG,IAAH,GAAU,IAAId,OAAO,CAACjE,WAAZ,EAA9C;AACA,QAAIiF,SAAS,GAAGpD,cAAc,CAACoC,OAAO,CAACO,QAAT,CAA9B;AACA,QAAIpE,iBAAiB,GAAG6D,OAAO,CAAC7D,iBAAhC;;AAEA,QAAI6D,OAAO,CAACI,UAAR,KAAuB,IAA3B,EAAiC;AAC/BJ,MAAAA,OAAO,CAACiB,yBAAR,GAAoCjB,OAAO,CAACiB,yBAAR,IAAqC,EAAzE;AACAjB,MAAAA,OAAO,CAACiB,yBAAR,CAAkCC,QAAlC,GAA6ClB,OAAO,CAACiB,yBAAR,CAAkCC,QAAlC,IAA8C,EAA3F;AACAlB,MAAAA,OAAO,CAACiB,yBAAR,CAAkCC,QAAlC,CAA2CC,IAA3C,CAAgD;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAhD;AACD;;AAED,QAAIC,cAAc,GAAG,IAAIlF,iBAAJ,CAAsBuE,aAAtB,EAAqCV,OAAO,CAACiB,yBAA7C,CAArB;;AAEA,QAAIjB,OAAO,CAACK,0BAAZ,EAAwC;AACtCgB,MAAAA,cAAc,CAACC,QAAf,CAAwBtB,OAAO,CAACK,0BAAhC,EAA4DU,gBAAgB,IAAI,IAAIf,OAAO,CAACjE,WAAZ,EAAhF;AACD,KAzCyE,CA2C1E;AACA;AACA;AACA;;;AACA,QAAI4C,SAAS,IAAIE,mBAAmB,GAAG,EAAvC,EAA2C;AACzCwC,MAAAA,cAAc,CAACE,iBAAf,CAAiC1D,QAAQ,EAAzC;AACD;;AAED7D,IAAAA,MAAM,CAACT,gBAAP,CAAwB0G,KAAxB,EAA+B;AAC7BuB,MAAAA,4BAA4B,EAAE;AAC5B/F,QAAAA,KAAK,EAAE,IAAIgG,GAAJ,EADqB;AAE5B1H,QAAAA,QAAQ,EAAE;AAFkB,OADD;AAK7B2H,MAAAA,aAAa,EAAE;AACbjG,QAAAA,KAAK,EAAE,IAAIgG,GAAJ;AADM,OALc;AAQ7BE,MAAAA,mBAAmB,EAAE;AACnBlG,QAAAA,KAAK,EAAE,IAAImG,GAAJ;AADY,OARQ;AAW7BC,MAAAA,oBAAoB,EAAE;AACpB9H,QAAAA,QAAQ,EAAE,IADU;AAEpB0B,QAAAA,KAAK,EAAE;AAFa,OAXO;AAe7BqG,MAAAA,WAAW,EAAE;AACXrG,QAAAA,KAAK,EAAEuE,OAAO,CAACI;AADJ,OAfgB;AAkB7B2B,MAAAA,mBAAmB,EAAE;AACnBtG,QAAAA,KAAK,EAAEqE;AADY,OAlBQ;AAqB7BkC,MAAAA,WAAW,EAAE;AACXvG,QAAAA,KAAK,EAAE,EAAE6D;AADE,OArBgB;AAwB7B2C,MAAAA,wBAAwB,EAAE;AACxBlI,QAAAA,QAAQ,EAAE,IADc;AAExB0B,QAAAA,KAAK,EAAE;AAFiB,OAxBG;AA4B7ByG,MAAAA,UAAU,EAAE;AACVnI,QAAAA,QAAQ,EAAE,IADA;AAEV0B,QAAAA,KAAK,EAAE;AAFG,OA5BiB;AAgC7B0G,MAAAA,gBAAgB,EAAE;AAChBpI,QAAAA,QAAQ,EAAE,IADM;AAEhB0B,QAAAA,KAAK,EAAE;AAFS,OAhCW;AAoC7B2G,MAAAA,cAAc,EAAE;AACd3G,QAAAA,KAAK,EAAEqF;AADO,OApCa;AAuC7BuB,MAAAA,8BAA8B,EAAE;AAC9B5G,QAAAA,KAAK,EAAEuE,OAAO,CAACd;AADe,OAvCH;AA0C7BoD,MAAAA,uBAAuB,EAAE;AACvBvI,QAAAA,QAAQ,EAAE,IADa;AAEvB0B,QAAAA,KAAK,EAAE;AAFgB,OA1CI;AA8C7B8G,MAAAA,8BAA8B,EAAE;AAC9BxI,QAAAA,QAAQ,EAAE,IADoB;AAE9B0B,QAAAA,KAAK,EAAE;AAFuB,OA9CH;AAkD7B+G,MAAAA,gBAAgB,EAAE;AAChBzI,QAAAA,QAAQ,EAAE,IADM;AAEhB0B,QAAAA,KAAK,EAAE;AAFS,OAlDW;AAsD7BgH,MAAAA,YAAY,EAAE;AACZhH,QAAAA,KAAK,EAAE,IAAImG,GAAJ;AADK,OAtDe;AAyD7Bc,MAAAA,wBAAwB,EAAE;AACxB3I,QAAAA,QAAQ,EAAE,IADc;AAExB0B,QAAAA,KAAK,EAAE;AAFiB,OAzDG;AA6D7BkH,MAAAA,iCAAiC,EAAE;AACjC5I,QAAAA,QAAQ,EAAE,IADuB;AAEjC0B,QAAAA,KAAK,EAAE;AAF0B,OA7DN;AAiE7BmH,MAAAA,iBAAiB,EAAE;AACjB7I,QAAAA,QAAQ,EAAE,IADO;AAEjB0B,QAAAA,KAAK,EAAE;AAFU,OAjEU;AAqE7BoH,MAAAA,iBAAiB,EAAE;AACjBpH,QAAAA,KAAK,EAAEsF;AADU,OArEU;AAwE7B+B,MAAAA,WAAW,EAAE;AACX/I,QAAAA,QAAQ,EAAE,IADC;AAEX0B,QAAAA,KAAK,EAAE;AAFI,OAxEgB;AA4E7BsH,MAAAA,IAAI,EAAE;AACJtH,QAAAA,KAAK,EAAEuE,OAAO,CAACgD,GAAR,GAAchD,OAAO,CAACgD,GAAR,CAAYC,SAAZ,CAAsB,WAAtB,EAAmChD,KAAnC,CAAd,GAA0D,IAAI7B,GAAJ,CAAQ,QAAR,EAAkB6B,KAAlB,EAAyBe,SAAzB;AAD7D,OA5EuB;AA+E7BkC,MAAAA,gBAAgB,EAAE;AAChBzH,QAAAA,KAAK,EAAE,IAAIgG,GAAJ;AADS,OA/EW;AAkF7B0B,MAAAA,WAAW,EAAE;AACX1H,QAAAA,KAAK,EAAE,IAAIgG,GAAJ;AADI,OAlFgB;AAqF7B2B,MAAAA,qBAAqB,EAAE;AACrB3H,QAAAA,KAAK,EAAE,IAAIuE,OAAO,CAACS,oBAAZ,CAAiCY,cAAjC;AADc,OArFM;AAwF7BgC,MAAAA,oBAAoB,EAAE;AACpB5H,QAAAA,KAAK,EAAE,IAAImG,GAAJ;AADa,OAxFO;AA2F7B0B,MAAAA,YAAY,EAAE;AACZvJ,QAAAA,QAAQ,EAAE,IADE;AAEZ0B,QAAAA,KAAK,EAAE;AAFK,OA3Fe;AA+F7B8H,MAAAA,gBAAgB,EAAE;AAChBxJ,QAAAA,QAAQ,EAAE,IADM;AAEhB0B,QAAAA,KAAK,EAAE;AAFS,OA/FW;AAmG7B+H,MAAAA,aAAa,EAAE;AACbzJ,QAAAA,QAAQ,EAAE,IADG;AAEb0B,QAAAA,KAAK,EAAEuE,OAAO,CAACQ;AAFF,OAnGc;AAuG7BiD,MAAAA,eAAe,EAAE;AACfhI,QAAAA,KAAK,EAAE4F;AADQ,OAvGY;AA0G7BqC,MAAAA,qBAAqB,EAAE;AACrBjI,QAAAA,KAAK,EAAEsE,eAAe,CAAC4D;AADF,OA1GM;AA6G7BC,MAAAA,qBAAqB,EAAE;AACrBnI,QAAAA,KAAK,EAAEsE,eAAe,CAAC8D;AADF,OA7GM;AAgH7BC,MAAAA,qBAAqB,EAAE;AACrBrI,QAAAA,KAAK,EAAE,CAACiD,QAAQ,IAAIE,QAAb,KAA0BmB,eAAe,CAAC8D,KAAhB,CAAsBE,IAAtB,CAA2B,UAAUC,aAAV,EAAyB;AACnF,iBAAOA,aAAa,CAACC,KAAd,CAAoBC,WAApB,OAAsC,KAAtC,IAA+CF,aAAa,CAACG,SAApE;AACD,SAFgC;AADZ,OAhHM;AAqH7BC,MAAAA,kBAAkB,EAAE;AAClBrK,QAAAA,QAAQ,EAAE,IADQ;AAElB0B,QAAAA,KAAK,EAAE;AAFW,OArHS;AAyH7B4I,MAAAA,qBAAqB,EAAE;AACrB5I,QAAAA,KAAK,EAAE;AACLkI,UAAAA,KAAK,EAAE,EADF;AAELE,UAAAA,KAAK,EAAE;AAFF;AADc,OAzHM;AA+H7BS,MAAAA,qBAAqB,EAAE;AACrB7I,QAAAA,KAAK,EAAE,IAAIgG,GAAJ;AADc,OA/HM;AAkI7B8C,MAAAA,iBAAiB,EAAE;AACjBxK,QAAAA,QAAQ,EAAE,IADO;AAEjB0B,QAAAA,KAAK,EAAE,IAAIsC,MAAJ;AAFU,OAlIU;AAsI7ByG,MAAAA,UAAU,EAAE;AACV/I,QAAAA,KAAK,EAAEmF;AADG,OAtIiB;AAyI7B6D,MAAAA,qBAAqB,EAAE;AACrBhJ,QAAAA,KAAK,EAAEuE,OAAO,CAAC9C;AADM,OAzIM;AA4I7BwH,MAAAA,oBAAoB,EAAE;AACpBjJ,QAAAA,KAAK,EAAEuE,OAAO,CAAC7C;AADK,OA5IO;AA+I7BwH,MAAAA,aAAa,EAAE;AACblJ,QAAAA,KAAK,EAAEuE,OAAO,CAAC5C;AADF,OA/Ic;AAkJ7BwH,MAAAA,sCAAsC,EAAE;AACtCnJ,QAAAA,KAAK,EAAEuE,OAAO,CAAC/C;AADuB,OAlJX;AAqJ7B4H,MAAAA,gBAAgB,EAAE;AAChBpJ,QAAAA,KAAK,EAAEuE,OAAO,CAAC/D;AADC,OArJW;AAwJ7B6I,MAAAA,kBAAkB,EAAE;AAClBrJ,QAAAA,KAAK,EAAEuE,OAAO,CAAC7D;AADG,OAxJS;AA2J7B4I,MAAAA,sBAAsB,EAAE;AACtBtJ,QAAAA,KAAK,EAAEuE,OAAO,CAAC3D;AADO,OA3JK;AA8J7B2I,MAAAA,YAAY,EAAE;AACZjL,QAAAA,QAAQ,EAAE,IADE;AAEZ0B,QAAAA,KAAK,EAAE;AAFK,OA9Je;AAkK7BwJ,MAAAA,iBAAiB,EAAE;AACjBlL,QAAAA,QAAQ,EAAE,IADO;AAEjB0B,QAAAA,KAAK,EAAE;AAFU,OAlKU;AAsK7ByJ,MAAAA,qBAAqB,EAAE;AACrBzJ,QAAAA,KAAK,EAAE,IAAIgG,GAAJ,EADc;AAErB1H,QAAAA,QAAQ,EAAE;AAFW,OAtKM;AA0K7BoL,MAAAA,aAAa,EAAE;AACbpL,QAAAA,QAAQ,EAAE,IADG;AAEb0B,QAAAA,KAAK,EAAE;AAFM,OA1Kc;AA8K7BoE,MAAAA,EAAE,EAAE;AACFhG,QAAAA,UAAU,EAAE,IADV;AAEF4B,QAAAA,KAAK,EAAEoE;AAFL;AA9KyB,KAA/B;AAoLAC,IAAAA,kBAAkB,CAACsF,EAAnB,CAAsB,SAAtB,EAAiCtH,WAAW,CAAC,YAAY;AACvD,UAAImC,KAAK,CAACoC,8BAAV,EAA0C;AACxC,YAAI,CAACpC,KAAK,CAACqD,YAAX,EAAyB;AACvB+B,UAAAA,wBAAwB,CAACpF,KAAD,CAAxB;AACD;;AACD;AACD;;AACDA,MAAAA,KAAK,CAACqF,KAAN;AACD,KAR2C,CAA5C;AAUAjE,IAAAA,cAAc,CAACkE,gBAAf,CAAgC,aAAhC,EAA+CtF,KAAK,CAACuF,uBAAN,CAA8BC,IAA9B,CAAmCxF,KAAnC,CAA/C;AACAoB,IAAAA,cAAc,CAACkE,gBAAf,CAAgC,cAAhC,EAAgDtF,KAAK,CAACyF,wBAAN,CAA+BD,IAA/B,CAAoCxF,KAApC,CAAhD;AACAoB,IAAAA,cAAc,CAACkE,gBAAf,CAAgC,0BAAhC,EAA4DtF,KAAK,CAAC0F,+BAAN,CAAsCF,IAAtC,CAA2CxF,KAA3C,CAA5D;AACAoB,IAAAA,cAAc,CAACkE,gBAAf,CAAgC,sBAAhC,EAAwDtF,KAAK,CAAC2F,2BAAN,CAAkCH,IAAlC,CAAuCxF,KAAvC,CAAxD;AACAoB,IAAAA,cAAc,CAACkE,gBAAf,CAAgC,OAAhC,EAAyCtF,KAAK,CAAC4F,iBAAN,CAAwBJ,IAAxB,CAA6BxF,KAA7B,CAAzC;AAEA,QAAIhF,IAAI,GAAGgF,KAAX;;AACAA,IAAAA,KAAK,CAACmF,EAAN,CAAS,cAAT,EAAyB,SAASU,YAAT,CAAsBC,KAAtB,EAA6B;AACpD,UAAIA,KAAK,KAAK,QAAd,EAAwB;AACtB;AACD;;AACD9K,MAAAA,IAAI,CAAC+K,cAAL,CAAoB,cAApB,EAAoCF,YAApC;;AACA7K,MAAAA,IAAI,CAACyG,aAAL,CAAmBuE,OAAnB,CAA2B,UAAUC,WAAV,EAAuBC,eAAvB,EAAwC;AACjElL,QAAAA,IAAI,CAACmL,qBAAL,CAA2BD,eAA3B;AACD,OAFD;AAGD,KARD;;AASA,WAAOlG,KAAP;AACD;;AAED3G,EAAAA,YAAY,CAACqG,gBAAD,EAAmB,CAAC;AAC9BzF,IAAAA,GAAG,EAAE,UADyB;AAE9BuB,IAAAA,KAAK,EAAE,SAAS4K,QAAT,GAAoB;AACzB,aAAO,wBAAwB,KAAKrE,WAA7B,GAA2C,IAA3C,GAAkD,KAAKnC,EAAvD,GAA4D,GAAnE;AACD;AAED;;;;;;AAN8B,GAAD,EAY5B;AACD3F,IAAAA,GAAG,EAAE,kBADJ;;AAID;;;;;;AAMAuB,IAAAA,KAAK,EAAE,SAAS6K,gBAAT,CAA0BC,SAA1B,EAAqC;AAC1C,UAAIC,MAAM,GAAG,IAAb;;AAEA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAY;AACxCJ,QAAAA,SAAS,GAAG,IAAIC,MAAM,CAAC3B,gBAAX,CAA4B0B,SAA5B,CAAZ;AACA,eAAOC,MAAM,CAAC/C,eAAP,CAAuBmD,eAAvB,CAAuCL,SAAvC,CAAP;AACD,OAHM,EAGJM,KAHI,CAGE,UAAUC,KAAV,EAAiB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,QAAAA,MAAM,CAACzD,IAAP,CAAYgE,IAAZ,CAAiB,oCAAoCR,SAAS,GAAG,MAAMA,SAAS,CAACA,SAAhB,GAA4B,GAA/B,GAAqC,MAAlF,IAA4F,IAA5F,GAAmGO,KAAK,CAACE,OAA1H;AACD,OAbM,CAAP;AAcD;AAED;;;;;;;AA7BC,GAZ4B,EAgD5B;AACD9M,IAAAA,GAAG,EAAE,mBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASwL,iBAAT,CAA2BC,UAA3B,EAAuC;AAC5C,aAAOT,OAAO,CAACU,GAAR,CAAYD,UAAU,CAACE,GAAX,CAAe,KAAKd,gBAApB,EAAsC,IAAtC,CAAZ,EAAyDK,IAAzD,CAA8D,YAAY,CAAE,CAA5E,CAAP;AACD;AAED;;;;;;;;AANC,GAhD4B,EA8D5B;AACDzM,IAAAA,GAAG,EAAE,yBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAAS4L,uBAAT,CAAiCC,KAAjC,EAAwC;AAC7C,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAIC,WAAW,GAAGC,uBAAuB,CAAC,IAAD,EAAOH,KAAK,CAACI,IAAb,CAAzC;;AACA,UAAIF,WAAW,IAAIA,WAAW,CAACG,MAA/B,EAAuC;AACrC,YAAIC,UAAU,GAAGJ,WAAW,CAACG,MAAZ,CAAmBL,KAAnB,GAA2BE,WAAW,CAACG,MAAZ,CAAmBL,KAAnB,CAAyBzH,EAApD,GAAyD,IAA1E;;AACA,YAAI+H,UAAJ,EAAgB;AACd,eAAK7E,IAAL,CAAUgE,IAAV,CAAe,0BAA0BS,WAAW,CAACK,GAAtC,GAA4C,IAA5C,GAAmDD,UAAnD,GAAgE,MAAhE,GAAyEN,KAAK,CAACzH,EAA9F;AACD,SAJoC,CAKrC;AACA;AACA;;;AACA,aAAKyE,qBAAL,CAA2BwD,GAA3B,CAA+BN,WAA/B,EAA4CA,WAAW,CAACG,MAAZ,CAAmBI,YAAnB,CAAgCT,KAAhC,EAAuCX,IAAvC,CAA4C,YAAY;AAClGa,UAAAA,WAAW,CAACQ,SAAZ,GAAwB,UAAxB;AACD,SAF2C,EAEzC,YAAY,CACb;AACD,SAJ2C,EAIzCC,OAJyC,CAIjC,YAAY;AACrBV,UAAAA,MAAM,CAACjD,qBAAP,CAA6B4D,MAA7B,CAAoCV,WAApC;AACD,SAN2C,CAA5C;;AAOA,eAAOA,WAAP;AACD;;AACD,aAAO,KAAK/D,eAAL,CAAqB0E,cAArB,CAAoCb,KAApC,CAAP;AACD;AAED;;;;;;;AA1BC,GA9D4B,EA+F5B;AACDpN,IAAAA,GAAG,EAAE,cADJ;AAEDuB,IAAAA,KAAK,EAAE,SAAS2M,YAAT,CAAsBC,WAAtB,EAAmC;AACxC,UAAIC,KAAK,GAAGC,QAAQ,CAACF,WAAD,CAApB;;AACA,UAAI,CAACC,KAAL,EAAY;AACV,eAAO7B,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,UAAIQ,UAAU,GAAG,KAAK3C,iBAAL,CAAuBiE,QAAvB,CAAgCF,KAAhC,CAAjB;;AACA,aAAO,KAAKrB,iBAAL,CAAuBC,UAAvB,CAAP;AACD;AAED;;;;;;;AAXC,GA/F4B,EAiH5B;AACDhN,IAAAA,GAAG,EAAE,SADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASgN,OAAT,CAAiBnD,KAAjB,EAAwB;AAC7B,UAAIoD,MAAM,GAAG,IAAb;;AAEA,aAAOjC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAY;AACxC,YAAI,CAAC+B,MAAM,CAACnF,gBAAZ,EAA8B;AAC5BmF,UAAAA,MAAM,CAACnF,gBAAP,GAA0B,UAA1B;AACD;;AACD,eAAOmF,MAAM,CAACC,qBAAP,CAA6BrD,KAA7B,CAAP;AACD,OALM,EAKJuB,KALI,CAKE,YAAY;AACnB,cAAM,IAAInJ,gCAAJ,EAAN;AACD,OAPM,EAOJiJ,IAPI,CAOC,YAAY;AAClB,eAAO+B,MAAM,CAACjF,eAAP,CAAuBmF,YAAvB,EAAP;AACD,OATM,EASJjC,IATI,CASC,UAAUkC,MAAV,EAAkB;AACxB,YAAI,CAAClK,SAAL,EAAgB;AACdkK,UAAAA,MAAM,GAAGrK,mBAAmB,CAACqK,MAAD,CAA5B;AACD;;AAED,YAAIR,WAAW,GAAGQ,MAAlB;;AACA,YAAIH,MAAM,CAAC5E,qBAAX,EAAkC;AAChC,cAAIgF,UAAU,GAAGJ,MAAM,CAAC/D,aAAP,CAAqBkE,MAAM,CAACE,GAA5B,EAAiCL,MAAM,CAAClE,UAAxC,EAAoDkE,MAAM,CAACxD,qBAA3D,CAAjB,CADgC,CAEhC;AACA;AACA;;;AACA4D,UAAAA,UAAU,GAAGJ,MAAM,CAAC9D,sCAAP,CAA8CkE,UAA9C,EAA0DD,MAAM,CAACE,GAAjE,EAAsEzD,KAAK,CAACyD,GAA5E,CAAb;AACAV,UAAAA,WAAW,GAAG;AACZW,YAAAA,IAAI,EAAEX,WAAW,CAACW,IADN;AAEZD,YAAAA,GAAG,EAAED;AAFO,WAAd;AAID;;AACD,eAAOJ,MAAM,CAACO,oBAAP,CAA4BZ,WAA5B,CAAP;AACD,OA3BM,EA2BJ1B,IA3BI,CA2BC,YAAY;AAClB,eAAO+B,MAAM,CAACN,YAAP,CAAoB9C,KAApB,CAAP;AACD,OA7BM,EA6BJqB,IA7BI,CA6BC,YAAY;AAClB,eAAO+B,MAAM,CAACtE,kBAAP,IAA6BsE,MAAM,CAACQ,kBAAP,CAA0BR,MAAM,CAACtE,kBAAjC,CAApC;AACD,OA/BM,EA+BJuC,IA/BI,CA+BC,YAAY;AAClB+B,QAAAA,MAAM,CAACtE,kBAAP,GAA4B,IAA5B;AACA,eAAOsE,MAAM,CAACS,aAAP,CAAqBT,MAAM,CAACjF,eAAP,CAAuB2F,gBAA5C,CAAP;AACD,OAlCM,EAkCJvC,KAlCI,CAkCE,UAAUC,KAAV,EAAiB;AACxB,cAAMA,KAAK,YAAYpJ,gCAAjB,GAAoDoJ,KAApD,GAA4D,IAAIrJ,+BAAJ,EAAlE;AACD,OApCM,CAAP;AAqCD;AAED;;;;;;;AA5CC,GAjH4B,EAoK5B;AACDvD,IAAAA,GAAG,EAAE,QADJ;AAEDuB,IAAAA,KAAK,EAAE,SAAS4N,MAAT,GAAkB;AACvB,UAAI,KAAK5F,eAAL,CAAqB6F,cAArB,KAAwC,QAA5C,EAAsD;AACpD,aAAK7F,eAAL,CAAqB8F,KAArB;;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;AAVC,GApK4B,EAqL5B;AACDrP,IAAAA,GAAG,EAAE,yBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAAS+J,uBAAT,CAAiCgE,KAAjC,EAAwC;AAC7C,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAIvD,WAAW,GAAGsD,KAAK,CAACE,OAAxB;AACA,UAAIC,iBAAiB,GAAG,IAAI1L,iBAAJ,CAAsBiI,WAAtB,CAAxB;;AACA,WAAKvE,mBAAL,CAAyBiI,GAAzB,CAA6BD,iBAA7B;;AAEAzD,MAAAA,WAAW,CAACX,gBAAZ,CAA6B,OAA7B,EAAsC,YAAY;AAChDkE,QAAAA,MAAM,CAAC9H,mBAAP,CAA2BuG,MAA3B,CAAkCyB,iBAAlC;AACD,OAFD;AAIA,WAAKE,IAAL,CAAU,YAAV,EAAwBF,iBAAxB;AACD;AAED;;;;;;;AAhBC,GArL4B,EA4M5B;AACDzP,IAAAA,GAAG,EAAE,cADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASqO,YAAT,CAAsBxE,KAAtB,EAA6B;AAClC,UAAIyE,MAAM,GAAG,IAAb;;AAEA,WAAKhH,IAAL,CAAUiH,KAAV,CAAgB,8BAAhB;;AACA,UAAI,KAAK7H,gBAAT,EAA2B;AACzB,aAAKY,IAAL,CAAUiH,KAAV,CAAgB,qFAAhB;;AACA,aAAK7H,gBAAL,GAAwB,KAAxB;AACA,aAAK8C,iBAAL,GAAyB,IAAzB;AACD;;AACD,aAAOwB,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAY;AACxCoD,QAAAA,MAAM,CAAC7E,qBAAP,GAA+B,IAAIzD,GAAJ,CAAQsI,MAAM,CAACvI,4BAAf,CAA/B;AACA,eAAOuI,MAAM,CAACd,oBAAP,CAA4B;AAAED,UAAAA,IAAI,EAAE;AAAR,SAA5B,CAAP;AACD,OAHM,EAGJrC,IAHI,CAGC,YAAY;AAClBoD,QAAAA,MAAM,CAACzG,YAAP,GAAsB,KAAtB;AACA,eAAOyG,MAAM,CAACtB,OAAP,CAAenD,KAAf,CAAP;AACD,OANM,EAMJqB,IANI,CAMC,UAAUsD,UAAV,EAAsB;AAC5B,eAAOA,UAAU,GAAGxD,OAAO,CAACC,OAAR,EAAH,GAAuBqD,MAAM,CAACG,MAAP,EAAxC;AACD,OARM,CAAP;AASD;AAED;;;;;;;AAtBC,GA5M4B,EAyO5B;AACDhQ,IAAAA,GAAG,EAAE,0BADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASiK,wBAAT,CAAkC8D,KAAlC,EAAyC;AAC9C,UAAIA,KAAK,CAACjD,SAAV,EAAqB;AACnB,aAAK/D,gBAAL,CAAsBrB,IAAtB,CAA2BqI,KAAK,CAACjD,SAAjC;AACD;;AACD,UAAI4D,mBAAmB,GAAG;AACxBC,QAAAA,GAAG,EAAE;AACHlD,UAAAA,UAAU,EAAE,KAAKhF,UAAL,GAAkB,EAAlB,GAAuB,KAAKM,gBAAL,CAAsB6H,KAAtB,EADhC;AAEH/B,UAAAA,KAAK,EAAE,KAAKxF;AAFT,SADmB;AAKxBjD,QAAAA,EAAE,EAAE,KAAKA;AALe,OAA1B;;AAOA,UAAI,CAAC2J,KAAK,CAACjD,SAAX,EAAsB;AACpB4D,QAAAA,mBAAmB,CAACC,GAApB,CAAwBE,QAAxB,GAAmC,IAAnC;AACD;;AACD,UAAI,EAAE,KAAKpI,UAAL,IAAmBsH,KAAK,CAACjD,SAA3B,CAAJ,EAA2C;AACzC4D,QAAAA,mBAAmB,CAACC,GAApB,CAAwBG,QAAxB,GAAmC,KAAK7H,wBAAL,EAAnC;AACA,aAAKmH,IAAL,CAAU,YAAV,EAAwBM,mBAAxB;AACD;AACF;AAED;;;;;;AAtBC,GAzO4B,EAqQ5B;AACDjQ,IAAAA,GAAG,EAAE,iCADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASkK,+BAAT,GAA2C;AAChD,UAAI6E,MAAM,GAAG,IAAb;;AAEA,UAAIC,kBAAkB,GAAG,KAAKhH,eAAL,CAAqBgH,kBAA9C;;AAGA,WAAK1H,IAAL,CAAUiH,KAAV,CAAgB,8BAA8BS,kBAA9B,GAAmD,GAAnE,EANgD,CAQhD;;;AACA,UAAI,KAAKnI,uBAAL,KAAiC,QAAjC,IAA6CmI,kBAAkB,KAAK,QAApE,IAAgF,CAAC,KAAKxF,iBAAtF,IAA2G,CAAC,KAAK9C,gBAArH,EAAuI;AACrI,aAAKY,IAAL,CAAUgE,IAAV,CAAe,uCAAf;;AACA,aAAK9B,iBAAL,GAAyB,IAAzB;AACA,aAAKK,KAAL,GAHqI,CAIrI;AACD,OALD,CAOA;AAPA,WAQK,IAAI,KAAKhD,uBAAL,KAAiC,QAAjC,KAA8CmI,kBAAkB,KAAK,WAAvB,IAAsCA,kBAAkB,KAAK,WAA3G,CAAJ,EAA6H;AAC9H,eAAK1H,IAAL,CAAU2H,IAAV,CAAe,iBAAf;AACD;;AAEH,WAAKzI,wBAAL,GAAgC,KAAhC;;AACA,UAAIwI,kBAAkB,KAAK,cAA3B,EAA2C;AACzC,aAAKrH,qBAAL,CAA2BuH,KAA3B,CAAiC,YAAY;AAC3CH,UAAAA,MAAM,CAACpH,qBAAP,CAA6BwH,IAA7B;;AACA,cAAI,CAACJ,MAAM,CAACvF,iBAAR,IAA6B,CAACuF,MAAM,CAACrI,gBAAzC,EAA2D;AACzDqI,YAAAA,MAAM,CAACzH,IAAP,CAAYgE,IAAZ,CAAiB,uEAAjB;;AACAyD,YAAAA,MAAM,CAACvF,iBAAP,GAA2B,IAA3B;AACAuF,YAAAA,MAAM,CAACvI,wBAAP,GAAkC,IAAlC;;AACAuI,YAAAA,MAAM,CAAClF,KAAP;;AACAkF,YAAAA,MAAM,CAACX,IAAP,CAAY,2BAAZ;AACD;AACF,SATD;AAUD,OAXD,MAWO;AACL,aAAKzG,qBAAL,CAA2BwH,IAA3B;AACD;;AAED,WAAKtI,uBAAL,GAA+BmI,kBAA/B;AACA,WAAKZ,IAAL,CAAU,2BAAV;AACD;AAED;;;;;;AA3CC,GArQ4B,EAsT5B;AACD3P,IAAAA,GAAG,EAAE,6BADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASmK,2BAAT,GAAuC;AAC5C,UAAI,KAAKnC,eAAL,CAAqB6F,cAArB,KAAwC,QAA5C,EAAsD;AACpD,aAAK9H,4BAAL,GAAoC,IAAIC,GAAJ,CAAQ,KAAKyD,qBAAb,CAApC;AACD,OAFD,MAEO,IAAI,KAAKzB,eAAL,CAAqB6F,cAArB,KAAwC,QAAxC,IAAoD,KAAKvD,KAAL,KAAe,QAAvE,EAAiF;AACtF,aAAK8E,OAAL,CAAa,QAAb;AACD;AACF;AAED;;;;;;;AAVC,GAtT4B,EAuU5B;AACD3Q,IAAAA,GAAG,EAAE,mBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASoK,iBAAT,CAA2B2D,KAA3B,EAAkC;AACvC,UAAIsB,MAAM,GAAG,IAAb;;AAEA,UAAI/B,GAAG,GAAG,KAAKtF,eAAL,CAAqBsH,iBAArB,GAAyC,KAAKtH,eAAL,CAAqBsH,iBAArB,CAAuChC,GAAhF,GAAsF,IAAhG;;AAEA,UAAI,CAAC,KAAK5D,aAAV,EAAyB;AACvB,aAAKA,aAAL,GAAqBqE,KAAK,CAAChC,WAAN,IAAqBgC,KAAK,CAAChC,WAAN,CAAkBK,GAAvC,GAA6C,IAAItJ,eAAJ,EAA7C,CACrB;AACA;AACA;AACA;AAJqB,UAKnBK,QAAQ,IAAI,KAAKwD,cAAjB,GAAkC,IAAI9D,mBAAJ,EAAlC,GAA8D,IAAID,oBAAJ,EALhE;AAMD;;AACD,WAAK8G,aAAL,CAAmB6F,MAAnB,CAA0BjC,GAA1B;;AAEA,UAAIkC,gBAAgB,GAAGzB,KAAK,CAAClC,KAA7B;AACA,UAAI4D,eAAe,GAAG,KAAK/F,aAAL,CAAmBlG,KAAnB,CAAyBuK,KAAzB,KAAmCyB,gBAAgB,CAACpL,EAA1E;AACA,UAAIsL,kBAAkB,GAAG,IAAIjN,kBAAJ,CAAuBgN,eAAvB,EAAwCD,gBAAxC,CAAzB,CAjBuC,CAmBvC;AACA;AACA;AACA;AACA;;AACA,WAAK5H,oBAAL,CAA0B4C,OAA1B,CAAkC,UAAUmF,aAAV,EAAyB;AACzD,YAAIA,aAAa,CAAC9D,KAAd,CAAoBzH,EAApB,KAA2BsL,kBAAkB,CAAC7D,KAAnB,CAAyBzH,EAAxD,EAA4D;AAC1DiL,UAAAA,MAAM,CAACzH,oBAAP,CAA4B6E,MAA5B,CAAmCkD,aAAnC;AACD;AACF,OAJD;;AAMA,WAAK/H,oBAAL,CAA0BuG,GAA1B,CAA8BuB,kBAA9B;;AACAF,MAAAA,gBAAgB,CAAC1F,gBAAjB,CAAkC,OAAlC,EAA2C,YAAY;AACrD,eAAOuF,MAAM,CAACzH,oBAAP,CAA4B6E,MAA5B,CAAmCiD,kBAAnC,CAAP;AACD,OAFD;AAGA,WAAKtB,IAAL,CAAU,YAAV,EAAwBsB,kBAAxB;AACD;AAED;;;;;;;AAvCC,GAvU4B,EAqX5B;AACDjR,IAAAA,GAAG,EAAE,eADJ;AAEDuB,IAAAA,KAAK,EAAE,SAAS0N,aAAT,CAAuBC,gBAAvB,EAAyC;AAC9C,UAAIiC,aAAa,GAAG,KAAKrG,YAAzB;;AAEA,UAAIoE,gBAAgB,IAAIA,gBAAgB,CAACL,GAAzC,EAA8C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAI,KAAK3G,cAAL,IAAuBgH,gBAAgB,CAACJ,IAAjB,KAA0B,QAArD,EAA+D;AAC7D,cAAIsC,OAAO,GAAG,KAAK7H,eAAL,CAAqB8H,UAArB,GAAkCC,MAAlC,CAAyC,UAAU7D,MAAV,EAAkB;AACvE,mBAAOA,MAAM,CAACL,KAAd;AACD,WAFa,CAAd;;AAGA+D,UAAAA,aAAa,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmBI,MAAnB,CAA0B,UAAUC,WAAV,EAAuBhE,IAAvB,EAA6B;AACrE,gBAAIiE,aAAa,GAAG3O,gBAAgB,CAACoM,gBAAgB,CAACL,GAAlB,EAAuBrB,IAAvB,EAA6B,qBAA7B,CAApC;AACA,gBAAIkE,aAAa,GAAGN,OAAO,CAACE,MAAR,CAAeK,cAAc,CAACpG,IAAf,CAAoB,IAApB,EAA0BiC,IAA1B,CAAf,CAApB;AACA,mBAAOgE,WAAW,IAAIC,aAAa,CAAChS,MAAd,GAAuBiS,aAAa,CAACjS,MAA3D;AACD,WAJe,EAIb0R,aAJa,CAAhB;AAKD,SAvB2C,CAyB5C;AACA;;;AACA,YAAIS,YAAY,GAAG,KAAKpK,aAAL,CAAmBqK,IAAnB,GAA0B,CAA7C;AACA,YAAIC,0BAA0B,GAAGhP,gBAAgB,CAACoM,gBAAgB,CAACL,GAAlB,EAAuB,aAAvB,CAAhB,CAAsDpP,MAAtD,GAA+D,CAAhG;AACA,YAAIsS,4BAA4B,GAAGH,YAAY,IAAI,CAACE,0BAApD;AACAX,QAAAA,aAAa,GAAGA,aAAa,IAAIY,4BAAjC;AACD;;AAED,UAAIC,OAAO,GAAGb,aAAa,GAAG,KAAKnB,MAAL,EAAH,GAAmBzD,OAAO,CAACC,OAAR,EAA9C;AACA,aAAOwF,OAAO,CAACvF,IAAR,CAAa,YAAY;AAC9B,eAAO0E,aAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;;;AA5CC,GArX4B,EAua5B;AACDnR,IAAAA,GAAG,EAAE,QADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASyO,MAAT,GAAkB;AACvB,UAAIiC,MAAM,GAAG,IAAb;;AAEA,UAAI3L,YAAY,GAAGxG,MAAM,CAACmG,MAAP,CAAc,EAAd,EAAkB,KAAKqD,aAAvB,CAAnB;AACA,WAAKF,YAAL,GAAoB,IAApB;;AACA,UAAI,KAAK2B,iBAAT,EAA4B;AAC1B,aAAKA,iBAAL,GAAyB,KAAzB;AACA,aAAK9C,gBAAL,GAAwB,IAAxB;AACA3B,QAAAA,YAAY,CAAC4L,UAAb,GAA0B,IAA1B;AACD;;AAED,aAAO3F,OAAO,CAACU,GAAR,CAAY,KAAK7C,qBAAL,CAA2B+H,MAA3B,EAAZ,EAAiD1F,IAAjD,CAAsD,YAAY;AACvE,eAAOwF,MAAM,CAAC1I,eAAP,CAAuB6I,WAAvB,CAAmC9L,YAAnC,CAAP;AACD,OAFM,EAEJqG,KAFI,CAEE,YAAY;AACnB,cAAM,IAAIpJ,+BAAJ,EAAN;AACD,OAJM,EAIJkJ,IAJI,CAIC,UAAUrB,KAAV,EAAiB;AACvB,YAAI,CAAC3G,SAAL,EAAgB;AACd2G,UAAAA,KAAK,GAAG9G,mBAAmB,CAAC8G,KAAD,CAA3B;AACD;;AAED,YAAIyD,GAAG,GAAGoD,MAAM,CAAC/J,cAAP,IAAyB+J,MAAM,CAAC1I,eAAP,CAAuBsH,iBAAhD,GAAoExN,4BAA4B,CAAC+H,KAAK,CAACyD,GAAP,EAAYoD,MAAM,CAAC1I,eAAP,CAAuBsH,iBAAvB,CAAyChC,GAArD,CAAhG,GAA4JzD,KAAK,CAACyD,GAA5K;;AAEA,YAAID,UAAU,GAAGqD,MAAM,CAACzH,oBAAP,CAA4BqE,GAA5B,EAAiCoD,MAAM,CAACzI,qBAAxC,EAA+DyI,MAAM,CAACvI,qBAAtE,CAAjB;;AAEAuI,QAAAA,MAAM,CAACnH,YAAP,GAAsB,KAAtB;;AACA,YAAI,CAACmH,MAAM,CAAC5I,gBAAZ,EAA8B;AAC5B4I,UAAAA,MAAM,CAAC5I,gBAAP,GAA0B,SAA1B;AACD;;AAED,YAAI4I,MAAM,CAACrI,qBAAX,EAAkC;AAChCqI,UAAAA,MAAM,CAACxJ,iCAAP,GAA2C;AACzCqG,YAAAA,IAAI,EAAE,OADmC;AAEzCD,YAAAA,GAAG,EAAED;AAFoC,WAA3C;AAIAA,UAAAA,UAAU,GAAGqD,MAAM,CAACxH,aAAP,CAAqBmE,UAArB,EAAiCqD,MAAM,CAAC3H,UAAxC,EAAoD2H,MAAM,CAACjH,qBAA3D,CAAb;AACD;;AACD,eAAOiH,MAAM,CAAClD,oBAAP,CAA4B;AACjCD,UAAAA,IAAI,EAAE,OAD2B;AAEjCD,UAAAA,GAAG,EAAED;AAF4B,SAA5B,CAAP;AAID,OA7BM,CAAP;AA8BD;AAED;;;;;;;AA7CC,GAva4B,EA2d5B;AACD5O,IAAAA,GAAG,EAAE,4BADJ;AAEDuB,IAAAA,KAAK,EAAE,SAAS8Q,0BAAT,CAAoClE,WAApC,EAAiD;AACtD,UAAImE,YAAY,GAAG,KAAK/I,eAAL,CAAqBgJ,eAArB,EAAnB;;AACA,UAAIC,kBAAkB,GAAGF,YAAY,CAAChB,MAAb,CAAoB,UAAUmB,IAAV,EAAgB;AAC3D,YAAIhF,MAAM,GAAGgF,IAAI,CAAChF,MAAlB;AAAA,YACIiF,OAAO,GAAGD,IAAI,CAACC,OADnB;AAEA,eAAO,CAACA,OAAD,IAAYjF,MAAZ,IAAsBA,MAAM,CAACL,KAApC;AACD,OAJwB,CAAzB,CAFsD,CAQtD;AACA;AACA;AACA;;AACA,UAAIuF,oBAAoB,GAAGH,kBAAkB,CAAClB,MAAnB,CAA0B,UAAUsB,KAAV,EAAiB;AACpE,YAAIjF,GAAG,GAAGiF,KAAK,CAACjF,GAAhB;AACA,eAAOA,GAAP;AACD,OAH0B,CAA3B;AAIA,UAAIkF,cAAc,GAAG,IAAItL,GAAJ,CAAQoL,oBAAoB,CAACzF,GAArB,CAAyB,UAAU4F,KAAV,EAAiB;AACrE,YAAInF,GAAG,GAAGmF,KAAK,CAACnF,GAAhB;AAAA,YACIF,MAAM,GAAGqF,KAAK,CAACrF,MADnB;AAEA,eAAO,CAACE,GAAD,EAAMF,MAAM,CAACL,KAAP,CAAazH,EAAnB,CAAP;AACD,OAJ4B,CAAR,CAArB;AAKA,UAAIoN,IAAI,GAAG3P,+BAA+B,CAAC+K,WAAW,CAACU,GAAb,EAAkBgE,cAAlB,CAA1C,CArBsD,CAuBtD;AACA;;AACA,UAAIG,sBAAsB,GAAGR,kBAAkB,CAAClB,MAAnB,CAA0B,UAAU2B,KAAV,EAAiB;AACtE,YAAItF,GAAG,GAAGsF,KAAK,CAACtF,GAAhB;AACA,eAAO,CAACA,GAAR;AACD,OAH4B,CAA7B;AAIA,UAAIuF,iBAAiB,GAAG,IAAI3L,GAAJ,CAAQ,CAAC,OAAD,EAAU,OAAV,EAAmB2F,GAAnB,CAAuB,UAAUM,IAAV,EAAgB;AACrE,eAAO,CAACA,IAAD,EAAOwF,sBAAsB,CAAC1B,MAAvB,CAA8B,UAAU6B,KAAV,EAAiB;AAC3D,cAAI1F,MAAM,GAAG0F,KAAK,CAAC1F,MAAnB;AACA,iBAAOA,MAAM,CAACL,KAAP,CAAaI,IAAb,KAAsBA,IAA7B;AACD,SAHa,EAGXN,GAHW,CAGP,UAAUkG,KAAV,EAAiB;AACtB,cAAI3F,MAAM,GAAG2F,KAAK,CAAC3F,MAAnB;AACA,iBAAOA,MAAM,CAACL,KAAP,CAAazH,EAApB;AACD,SANa,CAAP,CAAP;AAOD,OAR+B,CAAR,CAAxB;AASA,UAAI0N,IAAI,GAAGlQ,kCAAkC,CAAC4P,IAAD,EAAOF,cAAP,EAAuBK,iBAAvB,CAA7C;AAEA,aAAO,IAAI,KAAKrI,sBAAT,CAAgC;AACrCgE,QAAAA,GAAG,EAAEwE,IADgC;AAErCvE,QAAAA,IAAI,EAAEX,WAAW,CAACW;AAFmB,OAAhC,CAAP;AAID;AAED;;;;;;;AAhDC,GA3d4B,EAkhB5B;AACD9O,IAAAA,GAAG,EAAE,wBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAAS+R,sBAAT,CAAgClI,KAAhC,EAAuC;AAC5C,UAAImI,OAAO,GAAG,IAAd;;AAEA,aAAO,KAAKxE,oBAAL,CAA0B;AAAED,QAAAA,IAAI,EAAE;AAAR,OAA1B,EAAgDrC,IAAhD,CAAqD,YAAY;AACtE,eAAO8G,OAAO,CAACxE,oBAAR,CAA6B3D,KAA7B,CAAP;AACD,OAFM,CAAP;AAGD;AAED;;;;;;;AAVC,GAlhB4B,EAmiB5B;AACDpL,IAAAA,GAAG,EAAE,sBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASwN,oBAAT,CAA8BZ,WAA9B,EAA2C;AAChD,UAAIqF,OAAO,GAAG,IAAd;;AAEA,aAAO,KAAKjK,eAAL,CAAqBkK,mBAArB,CAAyCtF,WAAzC,EAAsDxB,KAAtD,CAA4D,UAAUC,KAAV,EAAiB;AAClF4G,QAAAA,OAAO,CAAC3K,IAAR,CAAagE,IAAb,CAAkB,wEAAwEsB,WAAW,CAACW,IAApF,GAA2F,2BAA3F,GAAyHlC,KAAK,CAACE,OAA/H,GAAyI,IAA3J;;AACA,YAAIqB,WAAW,CAACU,GAAhB,EAAqB;AACnB2E,UAAAA,OAAO,CAAC3K,IAAR,CAAagE,IAAb,CAAkB,iBAAiBsB,WAAW,CAACU,GAA/C;AACD;;AACD,cAAM,IAAItL,+BAAJ,EAAN;AACD,OANM,EAMJkJ,IANI,CAMC,YAAY;AAClB,YAAI0B,WAAW,CAACW,IAAZ,KAAqB,UAAzB,EAAqC;AACnC0E,UAAAA,OAAO,CAAC9K,iBAAR,GAA4B8K,OAAO,CAACtL,cAAR,GAAyBsL,OAAO,CAACnB,0BAAR,CAAmClE,WAAnC,CAAzB,GAA2EA,WAAvG;AACAqF,UAAAA,OAAO,CAAClL,gBAAR,GAA2B,EAA3B;;AACA,cAAI6F,WAAW,CAACW,IAAZ,KAAqB,OAAzB,EAAkC;AAChC0E,YAAAA,OAAO,CAAC7L,oBAAR;AACD,WAFD,MAEO,IAAIwG,WAAW,CAACW,IAAZ,KAAqB,QAAzB,EAAmC;AACxC0E,YAAAA,OAAO,CAACnL,8BAAR,GAAyCmL,OAAO,CAAC7L,oBAAjD;AACA+L,YAAAA,oBAAoB,CAACF,OAAD,CAApB;AACD;;AACDA,UAAAA,OAAO,CAAC5K,WAAR,GAAsByF,QAAQ,CAACF,WAAD,CAA9B;;AACAqF,UAAAA,OAAO,CAAC7D,IAAR,CAAa,aAAb,EAA4B6D,OAAO,CAACG,QAAR,EAA5B;AACD;AACF,OAnBM,CAAP;AAoBD;AAED;;;;;;;AA3BC,GAniB4B,EAqkB5B;AACD3T,IAAAA,GAAG,EAAE,uBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASkN,qBAAT,CAA+BN,WAA/B,EAA4C;AACjD,UAAIyF,OAAO,GAAG,IAAd;;AAEA,UAAIzF,WAAW,CAACU,GAAhB,EAAqB;AACnB,YAAI,CAAC,KAAK1G,8BAAV,EAA0C;AACxCgG,UAAAA,WAAW,CAACU,GAAZ,GAAkB,KAAKtE,qBAAL,CAA2B4D,WAAW,CAACU,GAAvC,EAA4CpK,SAAS,GAAG,MAAH,GAAY,IAAjE,EAAuE,KAAKoD,mBAAL,CAAyBgM,eAAhG,EAAiH,KAAKhM,mBAAL,CAAyBiM,eAA1I,CAAlB;AACD;;AACD3F,QAAAA,WAAW,CAACU,GAAZ,GAAkB,KAAKrE,oBAAL,CAA0B2D,WAAW,CAACU,GAAtC,EAA2C,KAAKrF,qBAAhD,EAAuE,KAAKE,qBAA5E,CAAlB,CAJmB,CAKnB;AACA;AACA;AACA;;AACA,YAAIjF,SAAJ,EAAe;AACb0J,UAAAA,WAAW,CAACU,GAAZ,GAAkBkF,uBAAuB,CAAC5F,WAAW,CAACU,GAAb,CAAzC;AACD;;AACD,YAAI,CAAC,KAAKtF,eAAL,CAAqBsH,iBAA1B,EAA6C;AAC3C,eAAK7I,UAAL,GAAkB,aAAagM,IAAb,CAAkB7F,WAAW,CAACU,GAA9B,CAAlB;AACD;AACF;;AACDV,MAAAA,WAAW,GAAG,IAAI,KAAKtD,sBAAT,CAAgCsD,WAAhC,CAAd,CAnBiD,CAoBjD;;AACA,aAAO5B,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAY;AACxC;AACA;AACA;AACA,YAAI0B,WAAW,CAACW,IAAZ,KAAqB,QAArB,IAAiC8E,OAAO,CAAChK,qBAA7C,EAAoE;AAClE,cAAIqK,yCAAyC,GAAGL,OAAO,CAAClJ,sCAAR,CAA+CkJ,OAAO,CAAClL,iBAAR,CAA0BmG,GAAzE,EAA8E+E,OAAO,CAACnL,iCAAR,CAA0CoG,GAAxH,EAA6HV,WAAW,CAACU,GAAzI,CAAhD;;AACA,cAAIoF,yCAAyC,KAAKL,OAAO,CAAClL,iBAAR,CAA0BmG,GAA5E,EAAiF;AAC/E,mBAAO+E,OAAO,CAACN,sBAAR,CAA+B;AACpCxE,cAAAA,IAAI,EAAE8E,OAAO,CAAClL,iBAAR,CAA0BoG,IADI;AAEpCD,cAAAA,GAAG,EAAEoF;AAF+B,aAA/B,CAAP;AAID;AACF;AACF,OAbM,EAaJxH,IAbI,CAaC,YAAY;AAClB,eAAOmH,OAAO,CAACrK,eAAR,CAAwB2K,oBAAxB,CAA6C/F,WAA7C,CAAP;AACD,OAfM,EAeJ1B,IAfI,CAeC,YAAY;AAClB,YAAI0B,WAAW,CAACW,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,cAAI8E,OAAO,CAAC3L,gBAAZ,EAA8B;AAC5B2L,YAAAA,OAAO,CAAC/K,IAAR,CAAaiH,KAAb,CAAmB,qDAAnB;;AACA8D,YAAAA,OAAO,CAAC3L,gBAAR,GAA2B,KAA3B;AACD;;AACDyL,UAAAA,oBAAoB,CAACE,OAAD,CAApB;AACD;AACF,OAvBM,EAuBJ,UAAUhH,KAAV,EAAiB;AAClBgH,QAAAA,OAAO,CAAC/K,IAAR,CAAagE,IAAb,CAAkB,yEAAyEsB,WAAW,CAACW,IAArF,GAA4F,2BAA5F,GAA0HlC,KAAK,CAACE,OAAhI,GAA0I,IAA5J;;AACA,YAAIqB,WAAW,CAACU,GAAhB,EAAqB;AACnB+E,UAAAA,OAAO,CAAC/K,IAAR,CAAagE,IAAb,CAAkB,iBAAiBsB,WAAW,CAACU,GAA/C;AACD;;AACD,cAAMjC,KAAN;AACD,OA7BM,CAAP;AA8BD;AAED;;;;;;;AAvDC,GArkB4B,EAmoB5B;AACD5M,IAAAA,GAAG,EAAE,oBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASyN,kBAAT,CAA4Bb,WAA5B,EAAyC;AAC9C,UAAIgG,OAAO,GAAG,IAAd;;AAEA,cAAQhG,WAAW,CAACW,IAApB;AACE,aAAK,QAAL;AACA,aAAK,UAAL;AACE,cAAIX,WAAW,CAACkC,QAAZ,KAAyB,KAAK1I,oBAA9B,IAAsD,KAAK4B,eAAL,CAAqB6F,cAArB,KAAwC,kBAAlG,EAAsH;AACpH,mBAAO7C,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,eAAK7E,oBAAL,GAA4BwG,WAAW,CAACkC,QAAxC;AACA;;AACF,aAAK,OAAL;AACE,iBAAO,KAAKlB,MAAL,EAAP;;AACF,aAAK,cAAL;AACE,cAAIhB,WAAW,CAACkC,QAAZ,IAAwB,KAAKhI,8BAAjC,EAAiE;AAC/D,mBAAOkE,OAAO,CAACC,OAAR,EAAP;AACD,WAFD,MAEO,IAAI,KAAKpD,YAAT,EAAuB;AAC5B,iBAAKc,kBAAL,GAA0BiE,WAA1B;AACA,mBAAO5B,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,eAAK7E,oBAAL,GAA4BwG,WAAW,CAACkC,QAAxC;AACA,iBAAO,KAAKL,MAAL,EAAP;;AACF,aAAK,OAAL;AACE,cAAI7B,WAAW,CAACkC,QAAZ,IAAwB,KAAKhI,8BAA7B,IAA+D,KAAKkB,eAAL,CAAqB6F,cAArB,KAAwC,QAA3G,EAAqH;AACnH,mBAAO7C,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,cAAI,KAAKjD,eAAL,CAAqB6F,cAArB,KAAwC,kBAA5C,EAAgE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAI,KAAKhG,YAAL,IAAqB,KAAKf,8BAAL,KAAwC,CAAjE,EAAoE;AAClE,mBAAK6B,kBAAL,GAA0BiE,WAA1B;AACA,qBAAO5B,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,iBAAK7E,oBAAL,GAA4BwG,WAAW,CAACkC,QAAxC;AACA,mBAAO,KAAKT,YAAL,CAAkBzB,WAAlB,CAAP;AACD;;AACD,eAAKxG,oBAAL,GAA4BwG,WAAW,CAACkC,QAAxC;AACA,iBAAO,KAAK9B,OAAL,CAAaJ,WAAb,EAA0B1B,IAA1B,CAA+B,YAAY,CAAE,CAA7C,CAAP;;AACF,gBAzCF,CA0CE;;AA1CF,OAH8C,CAgD9C;;;AACA,UAAI4D,QAAQ,GAAGlC,WAAW,CAACkC,QAA3B;AACA,aAAO9D,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAY;AACxC,eAAO0H,OAAO,CAAC1F,qBAAR,CAA8BN,WAA9B,CAAP;AACD,OAFM,EAEJxB,KAFI,CAEE,YAAY;AACnB,cAAM,IAAInJ,gCAAJ,EAAN;AACD,OAJM,EAIJiJ,IAJI,CAIC,YAAY;AAClB0H,QAAAA,OAAO,CAAC9L,8BAAR,GAAyCgI,QAAzC;AACA8D,QAAAA,OAAO,CAAC/K,YAAR,GAAuB,KAAvB;AACA,eAAO+K,OAAO,CAACjG,YAAR,CAAqBC,WAArB,CAAP;AACD,OARM,EAQJ1B,IARI,CAQC,YAAY;AAClB,eAAO0H,OAAO,CAACjK,kBAAR,IAA8BiK,OAAO,CAACnF,kBAAR,CAA2BmF,OAAO,CAACjK,kBAAnC,CAArC;AACD,OAVM,EAUJuC,IAVI,CAUC,YAAY;AAClB0H,QAAAA,OAAO,CAACjK,kBAAR,GAA6B,IAA7B;AACA,eAAOiK,OAAO,CAAClF,aAAR,CAAsBkF,OAAO,CAAC5K,eAAR,CAAwB2F,gBAA9C,EAAgEzC,IAAhE,CAAqE,YAAY,CAAE,CAAnF,CAAP;AACD,OAbM,CAAP;AAcD;AAED;;;;;;;AApEC,GAnoB4B,EA8sB5B;AACDzM,IAAAA,GAAG,EAAE,YADJ;AAEDuB,IAAAA,KAAK,EAAE,SAAS6S,UAAT,CAAoBC,QAApB,EAA8B;AACnC,UAAIrH,UAAU,GAAG,KAAK3C,iBAAL,CAAuByG,MAAvB,CAA8BuD,QAA9B,CAAjB;;AACA,aAAO,KAAKtH,iBAAL,CAAuBC,UAAvB,CAAP;AACD;AAED;;;;;;AAPC,GA9sB4B,EA2tB5B;AACDhN,IAAAA,GAAG,EAAE,oBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAAS+S,kBAAT,CAA4BrI,eAA5B,EAA6C;AAClD,UAAI,KAAKzE,aAAL,CAAmB+M,GAAnB,CAAuBtI,eAAvB,CAAJ,EAA6C;AAC3C;AACD;;AACD,UAAI;AACF,YAAIuI,eAAe,GAAG;AACpBC,UAAAA,OAAO,EAAExI,eAAe,CAACwI;AADL,SAAtB;;AAGA,YAAIxI,eAAe,CAACyI,iBAAhB,KAAsC,IAA1C,EAAgD;AAC9CF,UAAAA,eAAe,CAACE,iBAAhB,GAAoCzI,eAAe,CAACyI,iBAApD;AACD;;AACD,YAAIzI,eAAe,CAAC0I,cAAhB,KAAmC,IAAvC,EAA6C;AAC3CH,UAAAA,eAAe,CAACG,cAAhB,GAAiC1I,eAAe,CAAC0I,cAAjD;AACD;;AACD,YAAI3I,WAAW,GAAG,KAAKzC,eAAL,CAAqBlC,iBAArB,CAAuC4E,eAAe,CAACtG,EAAvD,EAA2D6O,eAA3D,CAAlB;;AACAvI,QAAAA,eAAe,CAAC2I,cAAhB,CAA+B5I,WAA/B;;AACA,aAAKxE,aAAL,CAAmBoG,GAAnB,CAAuB3B,eAAvB,EAAwCD,WAAxC;AACD,OAbD,CAaE,OAAOY,KAAP,EAAc,CACd;AACD;AACF;AAED;;;;;;AAxBC,GA3tB4B,EAyvB5B;AACD5M,IAAAA,GAAG,EAAE,qBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASsT,mBAAT,CAA6BC,gBAA7B,EAA+C;AACpD,UAAI,KAAKvL,eAAL,CAAqB6F,cAArB,KAAwC,QAAxC,IAAoD,KAAKnG,WAAL,CAAiBsL,GAAjB,CAAqBO,gBAArB,CAAxD,EAAgG;AAC9F;AACD;;AACD,UAAIrH,MAAM,GAAG,KAAK,CAAlB;;AACA,UAAI,KAAK9E,iBAAT,EAA4B;AAC1B,aAAKA,iBAAL,CAAuBvB,QAAvB,CAAgC0N,gBAAgB,CAAC1H,KAAjD;;AACAK,QAAAA,MAAM,GAAG,KAAKlE,eAAL,CAAqBnC,QAArB,CAA8B0N,gBAAgB,CAAC1H,KAA/C,EAAsD,KAAKzE,iBAA3D,CAAT;AACD,OAHD,MAGO;AACL,YAAI2E,WAAW,GAAG,KAAKH,uBAAL,CAA6B2H,gBAAgB,CAAC1H,KAA9C,CAAlB;;AACAK,QAAAA,MAAM,GAAGH,WAAW,CAACG,MAArB;AACD;;AACDqH,MAAAA,gBAAgB,CAACC,SAAjB,CAA2BtH,MAA3B;;AACA,WAAKxE,WAAL,CAAiB2E,GAAjB,CAAqBkH,gBAArB,EAAuCrH,MAAvC;AACD;AAED;;;;;AAlBC,GAzvB4B,EAgxB5B;AACDzN,IAAAA,GAAG,EAAE,OADJ;AAEDuB,IAAAA,KAAK,EAAE,SAAS8N,KAAT,GAAiB;AACtB,UAAI,KAAKF,MAAL,EAAJ,EAAmB;AACjB,aAAKxH,oBAAL;AACA,aAAKe,iBAAL,GAAyB;AAAEoG,UAAAA,IAAI,EAAE;AAAR,SAAzB;AACA,aAAKa,IAAL,CAAU,aAAV,EAAyB,KAAKgE,QAAL,EAAzB;AACD;AACF;AAED;;;;;;AAVC,GAhxB4B,EAgyB5B;AACD3T,IAAAA,GAAG,EAAE,mBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASyT,iBAAT,GAA6B;AAClC,aAAOzU,KAAK,CAACG,IAAN,CAAW,KAAK+G,mBAAhB,EAAqCwN,MAArC,CAA4C1U,KAAK,CAACG,IAAN,CAAW,KAAKyI,oBAAhB,CAA5C,CAAP;AACD;AAED;;;;;AANC,GAhyB4B,EA2yB5B;AACDnJ,IAAAA,GAAG,EAAE,UADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASoS,QAAT,GAAoB;AACzB,UAAI,CAAC,KAAKjL,iBAAV,EAA6B;AAC3B,eAAO,IAAP;AACD;;AACD,UAAIwG,gBAAgB,GAAG;AACrBJ,QAAAA,IAAI,EAAE,KAAKpG,iBAAL,CAAuBoG,IADR;AAErBuB,QAAAA,QAAQ,EAAE,KAAK1I;AAFM,OAAvB;;AAIA,UAAI,KAAKe,iBAAL,CAAuBmG,GAA3B,EAAgC;AAC9BK,QAAAA,gBAAgB,CAACL,GAAjB,GAAuB,KAAKnG,iBAAL,CAAuBmG,GAA9C;AACD;;AACD,aAAO;AACLV,QAAAA,WAAW,EAAEe,gBADR;AAELvJ,QAAAA,EAAE,EAAE,KAAKA;AAFJ,OAAP;AAID;AAED;;;;;AAnBC,GA3yB4B,EAm0B5B;AACD3F,IAAAA,GAAG,EAAE,OADJ;AAEDuB,IAAAA,KAAK,EAAE,SAAS6J,KAAT,GAAiB;AACtB,UAAI8J,OAAO,GAAG,IAAd;;AAEA,UAAI,KAAK9L,YAAL,IAAqB,KAAKnB,gBAA9B,EAAgD;AAC9C,aAAK6C,YAAL,GAAoB,IAApB;AACA,eAAOyB,OAAO,CAACC,OAAR,EAAP;AACD;;AAED,aAAO,KAAK2I,OAAL,CAAa,UAAb,EAAyB,UAAUnV,GAAV,EAAe;AAC7CkV,QAAAA,OAAO,CAACE,UAAR,CAAmB,UAAnB,EAA+BpV,GAA/B;;AACA,YAAIgS,OAAO,GAAGkD,OAAO,CAAC9L,YAAR,IAAwB8L,OAAO,CAACjN,gBAAhC,GAAmDsE,OAAO,CAACC,OAAR,EAAnD,GAAuE0I,OAAO,CAAClF,MAAR,EAArF;AACA,eAAOgC,OAAO,CAACvF,IAAR,CAAa,YAAY;AAC9ByI,UAAAA,OAAO,CAACG,aAAR,CAAsB,MAAtB,EAA8BrV,GAA9B;AACD,SAFM,EAEJ,UAAU4M,KAAV,EAAiB;AAClBsI,UAAAA,OAAO,CAACG,aAAR,CAAsB,MAAtB,EAA8BrV,GAA9B;;AACA,gBAAM4M,KAAN;AACD,SALM,CAAP;AAMD,OATM,CAAP;AAUD;AAED;;;;;;AAtBC,GAn0B4B,EA+1B5B;AACD5M,IAAAA,GAAG,EAAE,uBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAAS2K,qBAAT,CAA+BD,eAA/B,EAAgD;AACrD,UAAID,WAAW,GAAG,KAAKxE,aAAL,CAAmB8N,GAAnB,CAAuBrJ,eAAvB,CAAlB;;AACA,UAAID,WAAJ,EAAiB;AACfC,QAAAA,eAAe,CAACsJ,iBAAhB,CAAkCvJ,WAAlC;;AACA,aAAKxE,aAAL,CAAmBwG,MAAnB,CAA0B/B,eAA1B;;AACAD,QAAAA,WAAW,CAACqD,KAAZ;AACD;AACF;AAED;;;;;;AAXC,GA/1B4B,EAg3B5B;AACDrP,IAAAA,GAAG,EAAE,wBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASiU,sBAAT,CAAgCV,gBAAhC,EAAkD;AACvD,UAAI,KAAKvL,eAAL,CAAqB6F,cAArB,KAAwC,QAAxC,IAAoD,CAAC,KAAKnG,WAAL,CAAiBsL,GAAjB,CAAqBO,gBAArB,CAAzD,EAAiG;AAC/F;AACD;;AACD,UAAIrH,MAAM,GAAG,KAAKxE,WAAL,CAAiBqM,GAAjB,CAAqBR,gBAArB,CAAb;;AACA,WAAKvL,eAAL,CAAqBkM,WAArB,CAAiChI,MAAjC;;AACA,UAAI,KAAK9E,iBAAT,EAA4B;AAC1B,aAAKA,iBAAL,CAAuB8M,WAAvB,CAAmCX,gBAAgB,CAAC1H,KAApD;AACD;;AACD0H,MAAAA,gBAAgB,CAACY,YAAjB,CAA8BjI,MAA9B;;AACA,WAAKxE,WAAL,CAAiB+E,MAAjB,CAAwB8G,gBAAxB;AACD;AAED;;;;;;AAfC,GAh3B4B,EAq4B5B;AACD9U,IAAAA,GAAG,EAAE,kBADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASoU,gBAAT,CAA0BnP,aAA1B,EAAyC;AAC9C,UAAI,OAAO,KAAK+C,eAAL,CAAqBoM,gBAA5B,KAAiD,UAArD,EAAiE;AAC/D,aAAKpM,eAAL,CAAqBoM,gBAArB,CAAsClP,gBAAgB,CAACD,aAAD,CAAtD;AACD;AACF;AAED;;;;;;AARC,GAr4B4B,EAm5B5B;AACDxG,IAAAA,GAAG,EAAE,QADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASuP,MAAT,CAAgBb,mBAAhB,EAAqC;AAC1C,UAAI2F,OAAO,GAAG,IAAd;;AAEA,aAAO,KAAKT,OAAL,CAAa,UAAb,EAAyB,UAAUnV,GAAV,EAAe;AAC7C,YAAI4V,OAAO,CAAC/J,KAAR,KAAkB,QAAtB,EAAgC;AAC9B,iBAAOU,OAAO,CAACC,OAAR,EAAP;AACD;;AAEDoJ,QAAAA,OAAO,CAACR,UAAR,CAAmB,UAAnB,EAA+BpV,GAA/B;;AAEA,YAAI6V,OAAO,GAAG,EAAd;;AAEA,YAAI5F,mBAAmB,CAACC,GAAxB,EAA6B;AAC3B2F,UAAAA,OAAO,CAAC5O,IAAR,CAAa2O,OAAO,CAACxB,UAAR,CAAmBnE,mBAAmB,CAACC,GAAvC,CAAb;AACD;;AAED,YAAID,mBAAmB,CAAC9B,WAAxB,EAAqC;AACnC0H,UAAAA,OAAO,CAAC5O,IAAR,CAAa2O,OAAO,CAAC5G,kBAAR,CAA2BiB,mBAAmB,CAAC9B,WAA/C,CAAb;AACD;;AAED,eAAO5B,OAAO,CAACU,GAAR,CAAY4I,OAAZ,EAAqBpJ,IAArB,CAA0B,YAAY;AAC3CmJ,UAAAA,OAAO,CAACP,aAAR,CAAsB,MAAtB,EAA8BrV,GAA9B;AACD,SAFM,EAEJ,UAAU4M,KAAV,EAAiB;AAClBgJ,UAAAA,OAAO,CAACP,aAAR,CAAsB,MAAtB,EAA8BrV,GAA9B;;AACA,gBAAM4M,KAAN;AACD,SALM,CAAP;AAMD,OAvBM,CAAP;AAwBD;AAED;;;;;AA/BC,GAn5B4B,EAu7B5B;AACD5M,IAAAA,GAAG,EAAE,UADJ;AAEDuB,IAAAA,KAAK,EAAE,SAASc,QAAT,GAAoB;AACzB,UAAIyT,OAAO,GAAG,IAAd;;AAEA,aAAO1T,aAAa,CAAC,KAAKmH,eAAN,CAAb,CAAoCkD,IAApC,CAAyC,UAAUsJ,QAAV,EAAoB;AAClE,eAAOC,eAAe,CAACF,OAAD,EAAUC,QAAV,CAAtB;AACD,OAFM,CAAP;AAGD;AARA,GAv7B4B,EAg8B5B;AACD/V,IAAAA,GAAG,EAAE,oBADJ;AAEDsV,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,aAAO,KAAKvN,wBAAL,IAAiC,KAAKwB,eAAL,CAAqBgH,kBAArB,KAA4C,cAA7E,GAA8F,QAA9F,GAAyG,KAAKhH,eAAL,CAAqBgH,kBAArI;AACD;AAED;;;;;;AANC,GAh8B4B,EA48B5B;AACDvQ,IAAAA,GAAG,EAAE,gCADJ;AAEDsV,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,aAAO,KAAK/L,eAAL,CAAqB2F,gBAArB,GAAwCpM,gBAAgB,CAAC,KAAKyG,eAAL,CAAqB2F,gBAArB,CAAsCL,GAAvC,EAA4C,aAA5C,CAAhB,CAA2EpP,MAA3E,GAAoF,CAA5H,GAAgI,KAAvI;AACD;AAJA,GA58B4B,CAAnB,CAAZ;;AAm9BA,SAAOgG,gBAAP;AACD,CAluCsB,CAkuCrBxB,YAluCqB,CAAvB;;AAouCA,SAASgS,cAAT,CAAwBC,IAAxB,EAA8BC,KAA9B,EAAqC;AACnC,MAAIC,QAAQ,GAAG,GAAGnB,MAAH,CAAU5U,kBAAkB,CAAC6V,IAAI,CAAC/M,oBAAN,CAA5B,EAAyDkN,IAAzD,CAA8D,UAAUD,QAAV,EAAoB;AAC/F,WAAOA,QAAQ,CAAChJ,KAAT,CAAezH,EAAf,KAAsBwQ,KAAK,CAACG,OAAnC;AACD,GAFc,CAAf;AAGA,MAAIA,OAAO,GAAGF,QAAQ,GAAGA,QAAQ,CAACzQ,EAAZ,GAAiB,IAAvC;AACA,SAAO7F,MAAM,CAACmG,MAAP,CAAckQ,KAAd,EAAqB;AAAEG,IAAAA,OAAO,EAAEA;AAAX,GAArB,CAAP;AACD;;AAED,SAASN,eAAT,CAAyBE,IAAzB,EAA+BH,QAA/B,EAAyC;AACvC,SAAOjW,MAAM,CAACmG,MAAP,CAAc8P,QAAd,EAAwB;AAC7BQ,IAAAA,qBAAqB,EAAER,QAAQ,CAACQ,qBAAT,CAA+BrJ,GAA/B,CAAmC,UAAUiJ,KAAV,EAAiB;AACzE,aAAOF,cAAc,CAACC,IAAD,EAAOC,KAAP,CAArB;AACD,KAFsB,CADM;AAI7BK,IAAAA,qBAAqB,EAAET,QAAQ,CAACS,qBAAT,CAA+BtJ,GAA/B,CAAmC,UAAUiJ,KAAV,EAAiB;AACzE,aAAOF,cAAc,CAACC,IAAD,EAAOC,KAAP,CAArB;AACD,KAFsB;AAJM,GAAxB,CAAP;AAQD;AAED;;;;;AAKA;;;;;AAKA;;;;AAIA;;;;;;AAKA,SAAS9H,QAAT,CAAkBF,WAAlB,EAA+B;AAC7B,MAAIA,WAAW,CAACU,GAAhB,EAAqB;AACnB,QAAI9J,KAAK,GAAGoJ,WAAW,CAACU,GAAZ,CAAgB9J,KAAhB,CAAsB,gCAAtB,CAAZ;;AACA,QAAIA,KAAJ,EAAW;AACT,aAAOA,KAAK,CAAC,CAAD,CAAZ;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAED,SAAS0B,gBAAT,CAA0BD,aAA1B,EAAyC;AACvC,SAAO1G,MAAM,CAACmG,MAAP,CAAc;AACnBwQ,IAAAA,YAAY,EAAE,YADK;AAEnBC,IAAAA,aAAa,EAAE;AAFI,GAAd,EAGJlQ,aAHI,CAAP;AAID;AAED;;;;;;;;;;AAQA,SAASmL,cAAT,CAAwBnE,IAAxB,EAA8BC,MAA9B,EAAsC;AACpC,MAAIL,KAAK,GAAGK,MAAM,CAACL,KAAnB;AACA,SAAOA,KAAK,IAAIA,KAAK,CAACI,IAAN,KAAeA,IAAxB,IAAgCJ,KAAK,CAACuJ,UAAN,KAAqB,OAA5D;AACD;AAED;;;;;;;;AAOA,SAAS5C,uBAAT,CAAiClF,GAAjC,EAAsC;AACpC,SAAOA,GAAG,CAAC+H,OAAJ,CAAY,gBAAZ,EAA8B,WAA9B,CAAP;AACD;AAED;;;;;;;AAKA,SAASC,wBAAT,CAAkCvJ,WAAlC,EAA+C4I,IAA/C,EAAqD;AACnD,SAAO,CAAC5I,WAAW,CAACoF,OAAb,IAAwB,CAACwD,IAAI,CAAC9L,qBAAL,CAA2BmK,GAA3B,CAA+BjH,WAA/B,CAAzB,KAAyEA,WAAW,CAACwJ,gBAAZ,KAAiC,UAAjC,IAA+CxJ,WAAW,CAACwJ,gBAAZ,KAAiC,UAAhF,IAA8FxJ,WAAW,CAACQ,SAAZ,KAA0B,UAAjM,CAAP;AACD;AAED;;;;;;;;AAMA,SAASP,uBAAT,CAAiC2I,IAAjC,EAAuC1I,IAAvC,EAA6C;AAC3C,MAAI3H,eAAe,GAAG;AACpB4D,IAAAA,KAAK,EAAEyM,IAAI,CAAC1M,qBAAL,CAA2B0D,GAA3B,CAA+B,UAAUnD,KAAV,EAAiB;AACrD,aAAOA,KAAK,CAACC,WAAN,EAAP;AACD,KAFM,CADa;AAIpBL,IAAAA,KAAK,EAAEuM,IAAI,CAACxM,qBAAL,CAA2BwD,GAA3B,CAA+B,UAAU6J,KAAV,EAAiB;AACrD,UAAIhN,KAAK,GAAGgN,KAAK,CAAChN,KAAlB;AACA,aAAOA,KAAK,CAACC,WAAN,EAAP;AACD,KAHM;AAJa,IAQpBwD,IARoB,CAAtB;AAUA,MAAIwJ,oBAAoB,GAAGd,IAAI,CAAC/L,qBAAL,CAA2BqD,IAA3B,CAA3B;AACA,MAAIyJ,UAAU,GAAGpR,eAAe,CAACwQ,IAAhB,CAAqB,UAAUtM,KAAV,EAAiB;AACrD,WAAOmM,IAAI,CAAC3N,YAAL,CAAkBgM,GAAlB,CAAsBxK,KAAtB,CAAP;AACD,GAFgB,CAAjB;;AAGA,MAAI,CAACkN,UAAL,EAAiB;AACf,WAAOD,oBAAoB,CAACE,KAArB,EAAP;AACD;;AAED,MAAI5J,WAAW,GAAG0J,oBAAoB,CAACX,IAArB,CAA0B,UAAU/I,WAAV,EAAuB;AACjE,QAAI6J,cAAc,GAAGjB,IAAI,CAAClN,gBAAL,CAAsBsM,GAAtB,CAA0BhI,WAAW,CAACK,GAAtC,CAArB;;AACA,WAAOwJ,cAAc,IAAIA,cAAc,CAAC5C,GAAf,CAAmB0C,UAAnB,CAAzB;AACD,GAHiB,CAAlB;;AAKA,MAAI3J,WAAJ,EAAiB;AACf0J,IAAAA,oBAAoB,CAACI,MAArB,CAA4BJ,oBAAoB,CAACK,OAArB,CAA6B/J,WAA7B,CAA5B,EAAuE,CAAvE;AACD;;AACD,SAAOA,WAAP;AACD;AAED;;;;;;;AAKA,SAASgK,iBAAT,CAA2BpB,IAA3B,EAAiC;AAC/B,MAAI/H,WAAW,GAAG+H,IAAI,CAAC3M,eAAL,CAAqB2F,gBAAvC;;AACA,MAAI,CAACf,WAAL,EAAkB;AAChB;AACD;;AACDrL,EAAAA,gBAAgB,CAACqL,WAAW,CAACU,GAAb,CAAhB,CAAkC9C,OAAlC,CAA0C,UAAUwL,OAAV,EAAmB;AAC3D,QAAIC,QAAQ,GAAG3U,6BAA6B,CAAC0U,OAAD,CAA5C;AACAC,IAAAA,QAAQ,CAACzL,OAAT,CAAiB,UAAU0L,GAAV,EAAe1N,KAAf,EAAsB;AACrC,aAAOmM,IAAI,CAAC3N,YAAL,CAAkBmH,GAAlB,CAAsB3F,KAAtB,CAAP;AACD,KAFD;AAGD,GALD;AAMD;AAED;;;;;;;AAKA,SAAS2N,qBAAT,CAA+BxB,IAA/B,EAAqC;AACnC,MAAI/H,WAAW,GAAG+H,IAAI,CAAC3M,eAAL,CAAqBsH,iBAAvC;;AACA,MAAI,CAAC1C,WAAL,EAAkB;AAChB;AACD;;AACDrL,EAAAA,gBAAgB,CAACqL,WAAW,CAACU,GAAb,CAAhB,CAAkC9C,OAAlC,CAA0C,UAAUwL,OAAV,EAAmB;AAC3D,QAAI5J,GAAG,GAAG4J,OAAO,CAACxS,KAAR,CAAc,eAAd,EAA+B,CAA/B,CAAV;AACA,QAAIyS,QAAQ,GAAG3U,6BAA6B,CAAC0U,OAAD,CAA5C;;AACArB,IAAAA,IAAI,CAAClN,gBAAL,CAAsB4E,GAAtB,CAA0BD,GAA1B,EAA+B6J,QAA/B;AACD,GAJD;AAKD;AAED;;;;;;AAIA,SAASG,0BAAT,CAAoCzB,IAApC,EAA0C;AACxCA,EAAAA,IAAI,CAAC/L,qBAAL,CAA2BV,KAA3B,GAAmC,EAAnC;AACAyM,EAAAA,IAAI,CAAC/L,qBAAL,CAA2BR,KAA3B,GAAmC,EAAnC;;AACAuM,EAAAA,IAAI,CAAC3M,eAAL,CAAqBgJ,eAArB,GAAuCxG,OAAvC,CAA+C,UAAUuB,WAAV,EAAuB;AACpE,QAAIuJ,wBAAwB,CAACvJ,WAAD,EAAc4I,IAAd,CAA5B,EAAiD;AAC/C,UAAI9I,KAAK,GAAGE,WAAW,CAAC8I,QAAZ,CAAqBhJ,KAAjC;;AACA8I,MAAAA,IAAI,CAAC/L,qBAAL,CAA2BiD,KAAK,CAACI,IAAjC,EAAuCvG,IAAvC,CAA4CqG,WAA5C;AACD;AACF,GALD;AAMD;AAED;;;;;;;AAKA,SAASoG,oBAAT,CAA8BwC,IAA9B,EAAoC;AAClC,MAAIA,IAAI,CAAChO,cAAT,EAAyB;AACvByP,IAAAA,0BAA0B,CAACzB,IAAD,CAA1B;AACAoB,IAAAA,iBAAiB,CAACpB,IAAD,CAAjB;AACAwB,IAAAA,qBAAqB,CAACxB,IAAD,CAArB;AACD;;AACD,MAAIA,IAAI,CAAC/N,8BAAT,EAAyC;AACvCgD,IAAAA,wBAAwB,CAAC+K,IAAD,CAAxB;AACD;AACF;AAED;;;;;;;AAKA,SAAS/K,wBAAT,CAAkC+K,IAAlC,EAAwC;AACtC,MAAI0B,qBAAqB,GAAG1B,IAAI,CAACrO,mBAAjC;AAAA,MACIgM,eAAe,GAAG+D,qBAAqB,CAAC/D,eAD5C;AAAA,MAEIC,eAAe,GAAG8D,qBAAqB,CAAC9D,eAF5C;AAKA,MAAI+D,WAAW,GAAG,IAAItQ,GAAJ,CAAQ,CAAC,CAAC,OAAD,EAAUsM,eAAV,CAAD,EAA6B,CAAC,OAAD,EAAUC,eAAV,CAA7B,CAAR,CAAlB;;AAEAoC,EAAAA,IAAI,CAAC3M,eAAL,CAAqB8H,UAArB,GAAkCC,MAAlC,CAAyC,UAAU7D,MAAV,EAAkB;AACzD,WAAOA,MAAM,CAACL,KAAd;AACD,GAFD,EAEGrB,OAFH,CAEW,UAAU0B,MAAV,EAAkB;AAC3B,QAAIqK,UAAU,GAAGD,WAAW,CAACvC,GAAZ,CAAgB7H,MAAM,CAACL,KAAP,CAAaI,IAA7B,CAAjB;AACA,QAAIuK,MAAM,GAAGtK,MAAM,CAACvI,aAAP,EAAb;;AAEA,QAAI4S,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,CAA1C,EAA6C;AAC3CE,MAAAA,gBAAgB,CAACD,MAAD,CAAhB;AACD,KAFD,MAEO,IAAItU,KAAK,CAACwU,wBAAN,CAA+BxK,MAAM,CAACL,KAAtC,CAAJ,EAAkD;AACvD;AACA;AACA8I,MAAAA,IAAI,CAACrN,IAAL,CAAUgE,IAAV,CAAe,gCAAgCY,MAAM,CAACL,KAAP,CAAaI,IAA7C,GAAoD,SAApD,GAAgEC,MAAM,CAACL,KAAP,CAAazH,EAA7E,GAAkF,gDAAlF,GAAqI8H,MAAM,CAACL,KAAP,CAAa8K,KAAjK;AACD,KAJM,MAIA;AACLC,MAAAA,aAAa,CAACJ,MAAD,EAASD,UAAT,CAAb;AACD;;AAED,QAAI,CAACrT,SAAD,IAAcyR,IAAI,CAACtO,WAAnB,IAAkCmQ,MAAM,CAACK,SAAP,CAAiB3Y,MAAjB,GAA0B,CAAhE,EAAmE;AACjE;AACA;AACA;AACA;AACA;AACAsY,MAAAA,MAAM,CAACK,SAAP,CAAiB,CAAjB,EAAoBC,eAApB,GAAsC,MAAtC;AACD;;AAED5K,IAAAA,MAAM,CAACtI,aAAP,CAAqB4S,MAArB,EAA6BpL,KAA7B,CAAmC,UAAUC,KAAV,EAAiB;AAClDsJ,MAAAA,IAAI,CAACrN,IAAL,CAAUgE,IAAV,CAAe,kDAAkDY,MAAM,CAACL,KAAP,CAAaI,IAA/D,GAAsE,SAAtE,GAAkFC,MAAM,CAACL,KAAP,CAAazH,EAA/F,GAAoG,IAApG,IAA4GiH,KAAK,CAACE,OAAN,IAAiBF,KAAK,CAAC0L,IAAnI,CAAf;AACD,KAFD;AAGD,GA5BD;AA6BD;AAED;;;;;;;AAKA,SAASN,gBAAT,CAA0BD,MAA1B,EAAkC;AAChC,MAAIxX,KAAK,CAACC,OAAN,CAAcuX,MAAM,CAACK,SAArB,CAAJ,EAAqC;AACnCL,IAAAA,MAAM,CAACK,SAAP,CAAiBrM,OAAjB,CAAyB,UAAUwM,QAAV,EAAoB;AAC3C,aAAO,OAAOA,QAAQ,CAACT,UAAvB;AACD,KAFD;AAGD;AACF;AAED;;;;;;;;AAMA,SAASK,aAAT,CAAuBJ,MAAvB,EAA+BD,UAA/B,EAA2C;AACzC,MAAIrT,SAAJ,EAAe;AACbsT,IAAAA,MAAM,CAACK,SAAP,GAAmB,CAAC;AAAEN,MAAAA,UAAU,EAAEA;AAAd,KAAD,CAAnB;AACD,GAFD,MAEO;AACLC,IAAAA,MAAM,CAACK,SAAP,CAAiBrM,OAAjB,CAAyB,UAAUwM,QAAV,EAAoB;AAC3CA,MAAAA,QAAQ,CAACT,UAAT,GAAsBA,UAAtB;AACD,KAFD;AAGD;AACF;;AAEDU,MAAM,CAACC,OAAP,GAAiBhT,gBAAjB","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _require = require('@twilio/webrtc'),\n    DefaultMediaStream = _require.MediaStream,\n    DefaultRTCIceCandidate = _require.RTCIceCandidate,\n    DefaultRTCPeerConnection = _require.RTCPeerConnection,\n    DefaultRTCSessionDescription = _require.RTCSessionDescription,\n    getStatistics = _require.getStats;\n\nvar _require2 = require('@twilio/webrtc/lib/util'),\n    guessBrowser = _require2.guessBrowser;\n\nvar _require3 = require('@twilio/webrtc/lib/util/sdp'),\n    getSdpFormat = _require3.getSdpFormat;\n\nvar _require4 = require('../../util/constants'),\n    DEFAULT_LOG_LEVEL = _require4.DEFAULT_LOG_LEVEL;\n\nvar _require5 = require('../../util/sdp'),\n    createCodecMapForMediaSection = _require5.createCodecMapForMediaSection,\n    getMediaSections = _require5.getMediaSections,\n    revertSimulcastForNonVP8MediaSections = _require5.revertSimulcastForNonVP8MediaSections,\n    setBitrateParameters = _require5.setBitrateParameters,\n    setCodecPreferences = _require5.setCodecPreferences,\n    setSimulcast = _require5.setSimulcast,\n    unifiedPlanAddOrRewriteNewTrackIds = _require5.unifiedPlanAddOrRewriteNewTrackIds,\n    unifiedPlanAddOrRewriteTrackIds = _require5.unifiedPlanAddOrRewriteTrackIds,\n    unifiedPlanFilterLocalCodecs = _require5.unifiedPlanFilterLocalCodecs;\n\nvar _require6 = require('../../util/twilio-video-errors'),\n    MediaClientLocalDescFailedError = _require6.MediaClientLocalDescFailedError,\n    MediaClientRemoteDescFailedError = _require6.MediaClientRemoteDescFailedError;\n\nvar utils = require('../../util');\nvar buildLogLevels = utils.buildLogLevels,\n    makeUUID = utils.makeUUID,\n    oncePerTick = utils.oncePerTick;\n\n\nvar IceBox = require('./icebox');\nvar DefaultIceConnectionMonitor = require('./iceconnectionmonitor.js');\nvar DataTrackReceiver = require('../../data/receiver');\nvar MediaTrackReceiver = require('../../media/track/receiver');\nvar StateMachine = require('../../statemachine');\nvar Log = require('../../util/log');\nvar IdentityTrackMatcher = require('../../util/sdp/trackmatcher/identity');\nvar OrderedTrackMatcher = require('../../util/sdp/trackmatcher/ordered');\nvar MIDTrackMatcher = require('../../util/sdp/trackmatcher/mid');\nvar workaroundIssue8329 = require('../../util/sdp/issue8329');\n\nvar guess = guessBrowser();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\n\nvar firefoxMajorVersion = isFirefox ? parseInt(navigator.userAgent.match(/Firefox\\/(\\d+)/)[1], 10) : null;\n\nvar isRTCRtpSenderParamsSupported = typeof RTCRtpSender !== 'undefined' && typeof RTCRtpSender.prototype.getParameters === 'function' && typeof RTCRtpSender.prototype.setParameters === 'function';\n\nvar nInstances = 0;\n\n/*\nPeerConnectionV2 States\n-----------------------\n\n    +------+    +--------+\n    |      |    |        |\n    | open |--->| closed |\n    |      |    |        |\n    +------+    +--------+\n      |  ^          ^\n      |  |          |\n      |  |          |\n      v  |          |\n  +----------+      |\n  |          |      |\n  | updating |------+\n  |          |\n  +----------+\n\n*/\n\nvar states = {\n  open: ['closed', 'updating'],\n  updating: ['closed', 'open'],\n  closed: []\n};\n\n/**\n * @extends StateMachine\n * @property {id}\n * @emits PeerConnectionV2#iceConnectionStateChanged\n * @emits PeerConnectionV2#candidates\n * @emits PeerConnectionV2#description\n */\n\nvar PeerConnectionV2 = function (_StateMachine) {\n  _inherits(PeerConnectionV2, _StateMachine);\n\n  /**\n   * Construct a {@link PeerConnectionV2}.\n   * @param {string} id\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} [options]\n   */\n  function PeerConnectionV2(id, encodingParameters, preferredCodecs, options) {\n    _classCallCheck(this, PeerConnectionV2);\n\n    var _this = _possibleConstructorReturn(this, (PeerConnectionV2.__proto__ || Object.getPrototypeOf(PeerConnectionV2)).call(this, 'open', states));\n\n    options = Object.assign({\n      enableDscp: false,\n      dummyAudioMediaStreamTrack: null,\n      iceServers: [],\n      isRTCRtpSenderParamsSupported: isRTCRtpSenderParamsSupported,\n      logLevel: DEFAULT_LOG_LEVEL,\n      offerOptions: {},\n      revertSimulcastForNonVP8MediaSections: revertSimulcastForNonVP8MediaSections,\n      setBitrateParameters: setBitrateParameters,\n      setCodecPreferences: setCodecPreferences,\n      setSimulcast: setSimulcast,\n      IceConnectionMonitor: DefaultIceConnectionMonitor,\n      MediaStream: DefaultMediaStream,\n      RTCIceCandidate: DefaultRTCIceCandidate,\n      RTCPeerConnection: DefaultRTCPeerConnection,\n      RTCSessionDescription: DefaultRTCSessionDescription\n    }, options);\n\n    var configuration = getConfiguration(options);\n    var sdpFormat = getSdpFormat(configuration.sdpSemantics);\n    var isUnifiedPlan = sdpFormat === 'unified';\n\n    var localMediaStream = isUnifiedPlan ? null : new options.MediaStream();\n    var logLevels = buildLogLevels(options.logLevel);\n    var RTCPeerConnection = options.RTCPeerConnection;\n\n    if (options.enableDscp === true) {\n      options.chromeSpecificConstraints = options.chromeSpecificConstraints || {};\n      options.chromeSpecificConstraints.optional = options.chromeSpecificConstraints.optional || [];\n      options.chromeSpecificConstraints.optional.push({ googDscp: true });\n    }\n\n    var peerConnection = new RTCPeerConnection(configuration, options.chromeSpecificConstraints);\n\n    if (options.dummyAudioMediaStreamTrack) {\n      peerConnection.addTrack(options.dummyAudioMediaStreamTrack, localMediaStream || new options.MediaStream());\n    }\n\n    // NOTE(mroberts): We do this to workaround the following bug:\n    //\n    //   https://bugzilla.mozilla.org/show_bug.cgi?id=1481335\n    //\n    if (isFirefox && firefoxMajorVersion < 65) {\n      peerConnection.createDataChannel(makeUUID());\n    }\n\n    Object.defineProperties(_this, {\n      _appliedTrackIdsToAttributes: {\n        value: new Map(),\n        writable: true\n      },\n      _dataChannels: {\n        value: new Map()\n      },\n      _dataTrackReceivers: {\n        value: new Set()\n      },\n      _descriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _enableDscp: {\n        value: options.enableDscp\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _isIceConnectionInactive: {\n        writable: true,\n        value: false\n      },\n      _isIceLite: {\n        writable: true,\n        value: false\n      },\n      _isRestartingIce: {\n        writable: true,\n        value: false\n      },\n      _isUnifiedPlan: {\n        value: isUnifiedPlan\n      },\n      _isRTCRtpSenderParamsSupported: {\n        value: options.isRTCRtpSenderParamsSupported\n      },\n      _lastIceConnectionState: {\n        writable: true,\n        value: null\n      },\n      _lastStableDescriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _localCandidates: {\n        writable: true,\n        value: []\n      },\n      _localCodecs: {\n        value: new Set()\n      },\n      _localCandidatesRevision: {\n        writable: true,\n        value: 1\n      },\n      _localDescriptionWithoutSimulcast: {\n        writable: true,\n        value: null\n      },\n      _localDescription: {\n        writable: true,\n        value: null\n      },\n      _localMediaStream: {\n        value: localMediaStream\n      },\n      _localUfrag: {\n        writable: true,\n        value: null\n      },\n      _log: {\n        value: options.log ? options.log.createLog('signaling', _this) : new Log('webrtc', _this, logLevels)\n      },\n      _remoteCodecMaps: {\n        value: new Map()\n      },\n      _rtpSenders: {\n        value: new Map()\n      },\n      _iceConnectionMonitor: {\n        value: new options.IceConnectionMonitor(peerConnection)\n      },\n      _mediaTrackReceivers: {\n        value: new Set()\n      },\n      _needsAnswer: {\n        writable: true,\n        value: false\n      },\n      _negotiationRole: {\n        writable: true,\n        value: null\n      },\n      _offerOptions: {\n        writable: true,\n        value: options.offerOptions\n      },\n      _peerConnection: {\n        value: peerConnection\n      },\n      _preferredAudioCodecs: {\n        value: preferredCodecs.audio\n      },\n      _preferredVideoCodecs: {\n        value: preferredCodecs.video\n      },\n      _shouldApplySimulcast: {\n        value: (isChrome || isSafari) && preferredCodecs.video.some(function (codecSettings) {\n          return codecSettings.codec.toLowerCase() === 'vp8' && codecSettings.simulcast;\n        })\n      },\n      _queuedDescription: {\n        writable: true,\n        value: null\n      },\n      _recycledTransceivers: {\n        value: {\n          audio: [],\n          video: []\n        }\n      },\n      _replaceTrackPromises: {\n        value: new Map()\n      },\n      _remoteCandidates: {\n        writable: true,\n        value: new IceBox()\n      },\n      _sdpFormat: {\n        value: sdpFormat\n      },\n      _setBitrateParameters: {\n        value: options.setBitrateParameters\n      },\n      _setCodecPreferences: {\n        value: options.setCodecPreferences\n      },\n      _setSimulcast: {\n        value: options.setSimulcast\n      },\n      _revertSimulcastForNonVP8MediaSections: {\n        value: options.revertSimulcastForNonVP8MediaSections\n      },\n      _RTCIceCandidate: {\n        value: options.RTCIceCandidate\n      },\n      _RTCPeerConnection: {\n        value: options.RTCPeerConnection\n      },\n      _RTCSessionDescription: {\n        value: options.RTCSessionDescription\n      },\n      _shouldOffer: {\n        writable: true,\n        value: false\n      },\n      _shouldRestartIce: {\n        writable: true,\n        value: false\n      },\n      _trackIdsToAttributes: {\n        value: new Map(),\n        writable: true\n      },\n      _trackMatcher: {\n        writable: true,\n        value: null\n      },\n      id: {\n        enumerable: true,\n        value: id\n      }\n    });\n\n    encodingParameters.on('changed', oncePerTick(function () {\n      if (_this._isRTCRtpSenderParamsSupported) {\n        if (!_this._needsAnswer) {\n          updateEncodingParameters(_this);\n        }\n        return;\n      }\n      _this.offer();\n    }));\n\n    peerConnection.addEventListener('datachannel', _this._handleDataChannelEvent.bind(_this));\n    peerConnection.addEventListener('icecandidate', _this._handleIceCandidateEvent.bind(_this));\n    peerConnection.addEventListener('iceconnectionstatechange', _this._handleIceConnectionStateChange.bind(_this));\n    peerConnection.addEventListener('signalingstatechange', _this._handleSignalingStateChange.bind(_this));\n    peerConnection.addEventListener('track', _this._handleTrackEvent.bind(_this));\n\n    var self = _this;\n    _this.on('stateChanged', function stateChanged(state) {\n      if (state !== 'closed') {\n        return;\n      }\n      self.removeListener('stateChanged', stateChanged);\n      self._dataChannels.forEach(function (dataChannel, dataTrackSender) {\n        self.removeDataTrackSender(dataTrackSender);\n      });\n    });\n    return _this;\n  }\n\n  _createClass(PeerConnectionV2, [{\n    key: 'toString',\n    value: function toString() {\n      return '[PeerConnectionV2 #' + this._instanceId + ': ' + this.id + ']';\n    }\n\n    /**\n     * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's\n     * RTCIceConnectionState.\n     * @property {RTCIceConnectionState}\n     */\n\n  }, {\n    key: '_addIceCandidate',\n\n\n    /**\n     * Add an ICE candidate to the {@link PeerConnectionV2}.\n     * @private\n     * @param {object} candidate\n     * @returns {Promise<void>}\n     */\n    value: function _addIceCandidate(candidate) {\n      var _this2 = this;\n\n      return Promise.resolve().then(function () {\n        candidate = new _this2._RTCIceCandidate(candidate);\n        return _this2._peerConnection.addIceCandidate(candidate);\n      }).catch(function (error) {\n        // NOTE(mmalavalli): Firefox 68+ now generates an RTCIceCandidate with an\n        // empty candidate string to signal end-of-candidates, followed by a null\n        // candidate. As of now, Chrome and Safari reject this RTCIceCandidate. Since\n        // this does not affect the media connection between Firefox 68+ and Chrome/Safari\n        // in Peer-to-Peer Rooms, we suppress the Error and log a warning message.\n        //\n        // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n        //\n        _this2._log.warn('Failed to add RTCIceCandidate ' + (candidate ? '\"' + candidate.candidate + '\"' : 'null') + ': ' + error.message);\n      });\n    }\n\n    /**\n     * Add ICE candidates to the {@link PeerConnectionV2}.\n     * @private\n     * @param {Array<object>} candidates\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_addIceCandidates',\n    value: function _addIceCandidates(candidates) {\n      return Promise.all(candidates.map(this._addIceCandidate, this)).then(function () {});\n    }\n\n    /**\n     * Add a new RTCRtpTransceiver or update an existing RTCRtpTransceiver for the\n     * given MediaStreamTrack.\n     * @private\n     * @param {MediaStreamTrack} track\n     * @returns {RTCRtpTransceiver}\n     */\n\n  }, {\n    key: '_addOrUpdateTransceiver',\n    value: function _addOrUpdateTransceiver(track) {\n      var _this3 = this;\n\n      var transceiver = takeRecycledTransceiver(this, track.kind);\n      if (transceiver && transceiver.sender) {\n        var oldTrackId = transceiver.sender.track ? transceiver.sender.track.id : null;\n        if (oldTrackId) {\n          this._log.warn('Reusing transceiver: ' + transceiver.mid + '] ' + oldTrackId + ' => ' + track.id);\n        }\n        // NOTE(mpatwardhan):remember this transceiver while we replace track.\n        // we recycle transceivers that are not in use after 'negotiationCompleted', but we want to prevent\n        // this one from getting recycled while replaceTrack is pending.\n        this._replaceTrackPromises.set(transceiver, transceiver.sender.replaceTrack(track).then(function () {\n          transceiver.direction = 'sendrecv';\n        }, function () {\n          // Do nothing.\n        }).finally(function () {\n          _this3._replaceTrackPromises.delete(transceiver);\n        }));\n        return transceiver;\n      }\n      return this._peerConnection.addTransceiver(track);\n    }\n\n    /**\n     * Check the {@link IceBox}.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_checkIceBox',\n    value: function _checkIceBox(description) {\n      var ufrag = getUfrag(description);\n      if (!ufrag) {\n        return Promise.resolve();\n      }\n      var candidates = this._remoteCandidates.setUfrag(ufrag);\n      return this._addIceCandidates(candidates);\n    }\n\n    /**\n     * Create an answer and set it on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<boolean>}\n     */\n\n  }, {\n    key: '_answer',\n    value: function _answer(offer) {\n      var _this4 = this;\n\n      return Promise.resolve().then(function () {\n        if (!_this4._negotiationRole) {\n          _this4._negotiationRole = 'answerer';\n        }\n        return _this4._setRemoteDescription(offer);\n      }).catch(function () {\n        throw new MediaClientRemoteDescFailedError();\n      }).then(function () {\n        return _this4._peerConnection.createAnswer();\n      }).then(function (answer) {\n        if (!isFirefox) {\n          answer = workaroundIssue8329(answer);\n        }\n\n        var description = answer;\n        if (_this4._shouldApplySimulcast) {\n          var updatedSdp = _this4._setSimulcast(answer.sdp, _this4._sdpFormat, _this4._trackIdsToAttributes);\n          // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n          // unset simulcast for sections in local offer where corresponding\n          // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n          updatedSdp = _this4._revertSimulcastForNonVP8MediaSections(updatedSdp, answer.sdp, offer.sdp);\n          description = {\n            type: description.type,\n            sdp: updatedSdp\n          };\n        }\n        return _this4._setLocalDescription(description);\n      }).then(function () {\n        return _this4._checkIceBox(offer);\n      }).then(function () {\n        return _this4._queuedDescription && _this4._updateDescription(_this4._queuedDescription);\n      }).then(function () {\n        _this4._queuedDescription = null;\n        return _this4._maybeReoffer(_this4._peerConnection.localDescription);\n      }).catch(function (error) {\n        throw error instanceof MediaClientRemoteDescFailedError ? error : new MediaClientLocalDescFailedError();\n      });\n    }\n\n    /**\n     * Close the underlying RTCPeerConnection. Returns false if the\n     * RTCPeerConnection was already closed.\n     * @private\n     * @returns {boolean}\n     */\n\n  }, {\n    key: '_close',\n    value: function _close() {\n      if (this._peerConnection.signalingState !== 'closed') {\n        this._peerConnection.close();\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Handle a \"datachannel\" event.\n     * @private\n     * @param {RTCDataChannelEvent} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleDataChannelEvent',\n    value: function _handleDataChannelEvent(event) {\n      var _this5 = this;\n\n      var dataChannel = event.channel;\n      var dataTrackReceiver = new DataTrackReceiver(dataChannel);\n      this._dataTrackReceivers.add(dataTrackReceiver);\n\n      dataChannel.addEventListener('close', function () {\n        _this5._dataTrackReceivers.delete(dataTrackReceiver);\n      });\n\n      this.emit('trackAdded', dataTrackReceiver);\n    }\n\n    /**\n     * Handle a glare scenario on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_handleGlare',\n    value: function _handleGlare(offer) {\n      var _this6 = this;\n\n      this._log.debug('Glare detected; rolling back');\n      if (this._isRestartingIce) {\n        this._log.debug('An ICE restart was in progress; we\\'ll need to restart ICE again after rolling back');\n        this._isRestartingIce = false;\n        this._shouldRestartIce = true;\n      }\n      return Promise.resolve().then(function () {\n        _this6._trackIdsToAttributes = new Map(_this6._appliedTrackIdsToAttributes);\n        return _this6._setLocalDescription({ type: 'rollback' });\n      }).then(function () {\n        _this6._needsAnswer = false;\n        return _this6._answer(offer);\n      }).then(function (didReoffer) {\n        return didReoffer ? Promise.resolve() : _this6._offer();\n      });\n    }\n\n    /**\n     * Handle an ICE candidate event.\n     * @private\n     * @param {Event} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceCandidateEvent',\n    value: function _handleIceCandidateEvent(event) {\n      if (event.candidate) {\n        this._localCandidates.push(event.candidate);\n      }\n      var peerConnectionState = {\n        ice: {\n          candidates: this._isIceLite ? [] : this._localCandidates.slice(),\n          ufrag: this._localUfrag\n        },\n        id: this.id\n      };\n      if (!event.candidate) {\n        peerConnectionState.ice.complete = true;\n      }\n      if (!(this._isIceLite && event.candidate)) {\n        peerConnectionState.ice.revision = this._localCandidatesRevision++;\n        this.emit('candidates', peerConnectionState);\n      }\n    }\n\n    /**\n     * Handle an ICE connection state change event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceConnectionStateChange',\n    value: function _handleIceConnectionStateChange() {\n      var _this7 = this;\n\n      var iceConnectionState = this._peerConnection.iceConnectionState;\n\n\n      this._log.debug('ICE connection state is \"' + iceConnectionState + '\"');\n\n      // Case 1: Transition to \"failed\".\n      if (this._lastIceConnectionState !== 'failed' && iceConnectionState === 'failed' && !this._shouldRestartIce && !this._isRestartingIce) {\n        this._log.warn('ICE failed; attempting to restart ICE');\n        this._shouldRestartIce = true;\n        this.offer();\n        // eslint-disable-next-line brace-style\n      }\n\n      // Case 2: Transition from \"failed\".\n      else if (this._lastIceConnectionState === 'failed' && (iceConnectionState === 'connected' || iceConnectionState === 'completed')) {\n          this._log.info('ICE reconnected');\n        }\n\n      this._isIceConnectionInactive = false;\n      if (iceConnectionState === 'disconnected') {\n        this._iceConnectionMonitor.start(function () {\n          _this7._iceConnectionMonitor.stop();\n          if (!_this7._shouldRestartIce && !_this7._isRestartingIce) {\n            _this7._log.warn('ICE Connection Monitor detected inactivity; attempting to restart ICE');\n            _this7._shouldRestartIce = true;\n            _this7._isIceConnectionInactive = true;\n            _this7.offer();\n            _this7.emit('iceConnectionStateChanged');\n          }\n        });\n      } else {\n        this._iceConnectionMonitor.stop();\n      }\n\n      this._lastIceConnectionState = iceConnectionState;\n      this.emit('iceConnectionStateChanged');\n    }\n\n    /**\n     * Handle a signaling state change event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleSignalingStateChange',\n    value: function _handleSignalingStateChange() {\n      if (this._peerConnection.signalingState === 'stable') {\n        this._appliedTrackIdsToAttributes = new Map(this._trackIdsToAttributes);\n      } else if (this._peerConnection.signalingState === 'closed' && this.state !== 'closed') {\n        this.preempt('closed');\n      }\n    }\n\n    /**\n     * Handle a track event.\n     * @private\n     * @param {Event} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleTrackEvent',\n    value: function _handleTrackEvent(event) {\n      var _this8 = this;\n\n      var sdp = this._peerConnection.remoteDescription ? this._peerConnection.remoteDescription.sdp : null;\n\n      if (!this._trackMatcher) {\n        this._trackMatcher = event.transceiver && event.transceiver.mid ? new MIDTrackMatcher()\n        // NOTE(mroberts): Until Chrome ships RTCRtpTransceivers with MID\n        // support, we have to use the same hacky solution as Safari. Revisit\n        // this when RTCRtpTransceivers and MIDs land. We should be able to use\n        // the same technique as Firefox.\n        : isSafari || this._isUnifiedPlan ? new OrderedTrackMatcher() : new IdentityTrackMatcher();\n      }\n      this._trackMatcher.update(sdp);\n\n      var mediaStreamTrack = event.track;\n      var signaledTrackId = this._trackMatcher.match(event) || mediaStreamTrack.id;\n      var mediaTrackReceiver = new MediaTrackReceiver(signaledTrackId, mediaStreamTrack);\n\n      // NOTE(mmalavalli): In unified plan mode, \"ended\" is not fired on the remote\n      // MediaStreamTrack when the remote peer removes a track. So, when this\n      // MediaStreamTrack is re-used for a different track due to the remote peer\n      // calling RTCRtpSender.replaceTrack(), we delete the previous MediaTrackReceiver\n      // that owned this MediaStreamTrack before adding the new MediaTrackReceiver.\n      this._mediaTrackReceivers.forEach(function (trackReceiver) {\n        if (trackReceiver.track.id === mediaTrackReceiver.track.id) {\n          _this8._mediaTrackReceivers.delete(trackReceiver);\n        }\n      });\n\n      this._mediaTrackReceivers.add(mediaTrackReceiver);\n      mediaStreamTrack.addEventListener('ended', function () {\n        return _this8._mediaTrackReceivers.delete(mediaTrackReceiver);\n      });\n      this.emit('trackAdded', mediaTrackReceiver);\n    }\n\n    /**\n     * Conditionally re-offer.\n     * @private\n     * @param {?RTCSessionDescriptionInit} localDescription\n     * @returns {Promise<boolean>}\n     */\n\n  }, {\n    key: '_maybeReoffer',\n    value: function _maybeReoffer(localDescription) {\n      var shouldReoffer = this._shouldOffer;\n\n      if (localDescription && localDescription.sdp) {\n        // NOTE(mmalavalli): For \"unified-plan\" sdps, if the remote RTCPeerConnection sends\n        // an offer with fewer audio m= lines than the number of audio RTCRTPSenders\n        // in the local RTCPeerConnection, then the local RTCPeerConnection creates\n        // an answer with the same number of audio m= lines as in the offer. This\n        // behavior was triggered by the removal of 'offerToReceiveAudio' from the\n        // default RTCOfferOptions. Ideally, the local RTCPeerConnection should create\n        // an answer with the same number of audio m= lines as the number of\n        // RTCRTPSenders. In order to achieve this,the local RTCPeerConnection\n        // initiates renegotiation.\n        //\n        // We can reduce the number of cases where renegotiation is needed by\n        // re-introducing 'offerToReceiveAudio' to the default RTCOfferOptions with a\n        // value > 1.\n        if (this._isUnifiedPlan && localDescription.type === 'answer') {\n          var senders = this._peerConnection.getSenders().filter(function (sender) {\n            return sender.track;\n          });\n          shouldReoffer = ['audio', 'video'].reduce(function (shouldOffer, kind) {\n            var mediaSections = getMediaSections(localDescription.sdp, kind, '(sendrecv|sendonly)');\n            var sendersOfKind = senders.filter(isSenderOfKind.bind(null, kind));\n            return shouldOffer || mediaSections.length < sendersOfKind.length;\n          }, shouldReoffer);\n        }\n\n        // NOTE(mroberts): We also need to re-offer if we have a DataTrack to share\n        // but no m= application section.\n        var hasDataTrack = this._dataChannels.size > 0;\n        var hasApplicationMediaSection = getMediaSections(localDescription.sdp, 'application').length > 0;\n        var needsApplicationMediaSection = hasDataTrack && !hasApplicationMediaSection;\n        shouldReoffer = shouldReoffer || needsApplicationMediaSection;\n      }\n\n      var promise = shouldReoffer ? this._offer() : Promise.resolve();\n      return promise.then(function () {\n        return shouldReoffer;\n      });\n    }\n\n    /**\n     * Create an offer and set it on the {@link PeerConnectionV2}.\n     * @private\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_offer',\n    value: function _offer() {\n      var _this9 = this;\n\n      var offerOptions = Object.assign({}, this._offerOptions);\n      this._needsAnswer = true;\n      if (this._shouldRestartIce) {\n        this._shouldRestartIce = false;\n        this._isRestartingIce = true;\n        offerOptions.iceRestart = true;\n      }\n\n      return Promise.all(this._replaceTrackPromises.values()).then(function () {\n        return _this9._peerConnection.createOffer(offerOptions);\n      }).catch(function () {\n        throw new MediaClientLocalDescFailedError();\n      }).then(function (offer) {\n        if (!isFirefox) {\n          offer = workaroundIssue8329(offer);\n        }\n\n        var sdp = _this9._isUnifiedPlan && _this9._peerConnection.remoteDescription ? unifiedPlanFilterLocalCodecs(offer.sdp, _this9._peerConnection.remoteDescription.sdp) : offer.sdp;\n\n        var updatedSdp = _this9._setCodecPreferences(sdp, _this9._preferredAudioCodecs, _this9._preferredVideoCodecs);\n\n        _this9._shouldOffer = false;\n        if (!_this9._negotiationRole) {\n          _this9._negotiationRole = 'offerer';\n        }\n\n        if (_this9._shouldApplySimulcast) {\n          _this9._localDescriptionWithoutSimulcast = {\n            type: 'offer',\n            sdp: updatedSdp\n          };\n          updatedSdp = _this9._setSimulcast(updatedSdp, _this9._sdpFormat, _this9._trackIdsToAttributes);\n        }\n        return _this9._setLocalDescription({\n          type: 'offer',\n          sdp: updatedSdp\n        });\n      });\n    }\n\n    /**\n     * Add or rewrite local MediaStreamTrack IDs in the given Unified Plan RTCSessionDescription.\n     * @private\n     * @param {RTCSessionDescription} description\n     * @return {RTCSessionDescription}\n     */\n\n  }, {\n    key: '_addOrRewriteLocalTrackIds',\n    value: function _addOrRewriteLocalTrackIds(description) {\n      var transceivers = this._peerConnection.getTransceivers();\n      var activeTransceivers = transceivers.filter(function (_ref) {\n        var sender = _ref.sender,\n            stopped = _ref.stopped;\n        return !stopped && sender && sender.track;\n      });\n\n      // NOTE(mmalavalli): There is no guarantee that MediaStreamTrack IDs will be present in\n      // SDPs, and even if they are, there is no guarantee that they will be the same as the\n      // actual MediaStreamTrack IDs. So, we add or re-write the actual MediaStreamTrack IDs\n      // to the assigned m= sections here.\n      var assignedTransceivers = activeTransceivers.filter(function (_ref2) {\n        var mid = _ref2.mid;\n        return mid;\n      });\n      var midsToTrackIds = new Map(assignedTransceivers.map(function (_ref3) {\n        var mid = _ref3.mid,\n            sender = _ref3.sender;\n        return [mid, sender.track.id];\n      }));\n      var sdp1 = unifiedPlanAddOrRewriteTrackIds(description.sdp, midsToTrackIds);\n\n      // NOTE(mmalavalli): Chrome and Safari do not apply the offer until they get an answer.\n      // So, we add or re-write the actual MediaStreamTrack IDs to the unassigned m= sections here.\n      var unassignedTransceivers = activeTransceivers.filter(function (_ref4) {\n        var mid = _ref4.mid;\n        return !mid;\n      });\n      var newTrackIdsByKind = new Map(['audio', 'video'].map(function (kind) {\n        return [kind, unassignedTransceivers.filter(function (_ref5) {\n          var sender = _ref5.sender;\n          return sender.track.kind === kind;\n        }).map(function (_ref6) {\n          var sender = _ref6.sender;\n          return sender.track.id;\n        })];\n      }));\n      var sdp2 = unifiedPlanAddOrRewriteNewTrackIds(sdp1, midsToTrackIds, newTrackIdsByKind);\n\n      return new this._RTCSessionDescription({\n        sdp: sdp2,\n        type: description.type\n      });\n    }\n\n    /**\n     * Rollback and apply the given offer.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_rollbackAndApplyOffer',\n    value: function _rollbackAndApplyOffer(offer) {\n      var _this10 = this;\n\n      return this._setLocalDescription({ type: 'rollback' }).then(function () {\n        return _this10._setLocalDescription(offer);\n      });\n    }\n\n    /**\n     * Set a local description on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescription|RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_setLocalDescription',\n    value: function _setLocalDescription(description) {\n      var _this11 = this;\n\n      return this._peerConnection.setLocalDescription(description).catch(function (error) {\n        _this11._log.warn('Calling setLocalDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\n        if (description.sdp) {\n          _this11._log.warn('The SDP was ' + description.sdp);\n        }\n        throw new MediaClientLocalDescFailedError();\n      }).then(function () {\n        if (description.type !== 'rollback') {\n          _this11._localDescription = _this11._isUnifiedPlan ? _this11._addOrRewriteLocalTrackIds(description) : description;\n          _this11._localCandidates = [];\n          if (description.type === 'offer') {\n            _this11._descriptionRevision++;\n          } else if (description.type === 'answer') {\n            _this11._lastStableDescriptionRevision = _this11._descriptionRevision;\n            negotiationCompleted(_this11);\n          }\n          _this11._localUfrag = getUfrag(description);\n          _this11.emit('description', _this11.getState());\n        }\n      });\n    }\n\n    /**\n     * Set a remote RTCSessionDescription on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_setRemoteDescription',\n    value: function _setRemoteDescription(description) {\n      var _this12 = this;\n\n      if (description.sdp) {\n        if (!this._isRTCRtpSenderParamsSupported) {\n          description.sdp = this._setBitrateParameters(description.sdp, isFirefox ? 'TIAS' : 'AS', this._encodingParameters.maxAudioBitrate, this._encodingParameters.maxVideoBitrate);\n        }\n        description.sdp = this._setCodecPreferences(description.sdp, this._preferredAudioCodecs, this._preferredVideoCodecs);\n        // NOTE(mroberts): Do this to reduce our MediaStream count in Firefox. By\n        // mapping MediaStream IDs in the SDP to \"-\", we ensure the \"track\" event\n        // doesn't include any new MediaStreams in Firefox. Its `streams` member\n        // will always be the empty Array.\n        if (isFirefox) {\n          description.sdp = filterOutMediaStreamIds(description.sdp);\n        }\n        if (!this._peerConnection.remoteDescription) {\n          this._isIceLite = /a=ice-lite/.test(description.sdp);\n        }\n      }\n      description = new this._RTCSessionDescription(description);\n      // eslint-disable-next-line consistent-return\n      return Promise.resolve().then(function () {\n        // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n        // unset simulcast for sections in local offer where corresponding\n        // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n        if (description.type === 'answer' && _this12._shouldApplySimulcast) {\n          var sdpWithoutSimulcastForNonVP8MediaSections = _this12._revertSimulcastForNonVP8MediaSections(_this12._localDescription.sdp, _this12._localDescriptionWithoutSimulcast.sdp, description.sdp);\n          if (sdpWithoutSimulcastForNonVP8MediaSections !== _this12._localDescription.sdp) {\n            return _this12._rollbackAndApplyOffer({\n              type: _this12._localDescription.type,\n              sdp: sdpWithoutSimulcastForNonVP8MediaSections\n            });\n          }\n        }\n      }).then(function () {\n        return _this12._peerConnection.setRemoteDescription(description);\n      }).then(function () {\n        if (description.type === 'answer') {\n          if (_this12._isRestartingIce) {\n            _this12._log.debug('An ICE restart was in-progress and is now completed');\n            _this12._isRestartingIce = false;\n          }\n          negotiationCompleted(_this12);\n        }\n      }, function (error) {\n        _this12._log.warn('Calling setRemoteDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\n        if (description.sdp) {\n          _this12._log.warn('The SDP was ' + description.sdp);\n        }\n        throw error;\n      });\n    }\n\n    /**\n     * Update the {@link PeerConnectionV2}'s description.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_updateDescription',\n    value: function _updateDescription(description) {\n      var _this13 = this;\n\n      switch (description.type) {\n        case 'answer':\n        case 'pranswer':\n          if (description.revision !== this._descriptionRevision || this._peerConnection.signalingState !== 'have-local-offer') {\n            return Promise.resolve();\n          }\n          this._descriptionRevision = description.revision;\n          break;\n        case 'close':\n          return this._close();\n        case 'create-offer':\n          if (description.revision <= this._lastStableDescriptionRevision) {\n            return Promise.resolve();\n          } else if (this._needsAnswer) {\n            this._queuedDescription = description;\n            return Promise.resolve();\n          }\n          this._descriptionRevision = description.revision;\n          return this._offer();\n        case 'offer':\n          if (description.revision <= this._lastStableDescriptionRevision || this._peerConnection.signalingState === 'closed') {\n            return Promise.resolve();\n          }\n          if (this._peerConnection.signalingState === 'have-local-offer') {\n            // NOTE(mpatwardhan): For a peer connection\n            // 1) createOffer always generate SDP with `setup:actpass`\n            // 2) when remote description is set `setup:active`  - the answer generated selects the dtls role of setup:passive\n            // 3) when remote description is set `setup:passive` - the answer generated selects the dtls role of setup:active\n            // 4) when remote description is set `setup:actpass` - the answer generated uses the previously negotiated role (if not negotiated previously setup:active is used)\n            // This test shows the  behavior: https://github.com/twilio/twilio-webrtc.js/blob/master/test/integration/spec/rtcpeerconnection.js#L936\n            // with glare handling (if dtls role was not negotiated before ) the generated answer will set setup:active.\n            // we do not want that. lets wait for \"initial negotiation\" before attempting glare handling.\n            if (this._needsAnswer && this._lastStableDescriptionRevision === 0) {\n              this._queuedDescription = description;\n              return Promise.resolve();\n            }\n            this._descriptionRevision = description.revision;\n            return this._handleGlare(description);\n          }\n          this._descriptionRevision = description.revision;\n          return this._answer(description).then(function () {});\n        default:\n        // Do nothing.\n      }\n\n      // Handle answer or pranswer.\n      var revision = description.revision;\n      return Promise.resolve().then(function () {\n        return _this13._setRemoteDescription(description);\n      }).catch(function () {\n        throw new MediaClientRemoteDescFailedError();\n      }).then(function () {\n        _this13._lastStableDescriptionRevision = revision;\n        _this13._needsAnswer = false;\n        return _this13._checkIceBox(description);\n      }).then(function () {\n        return _this13._queuedDescription && _this13._updateDescription(_this13._queuedDescription);\n      }).then(function () {\n        _this13._queuedDescription = null;\n        return _this13._maybeReoffer(_this13._peerConnection.localDescription).then(function () {});\n      });\n    }\n\n    /**\n     * Update the {@link PeerConnectionV2}'s ICE candidates.\n     * @private\n     * @param {object} iceState\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_updateIce',\n    value: function _updateIce(iceState) {\n      var candidates = this._remoteCandidates.update(iceState);\n      return this._addIceCandidates(candidates);\n    }\n\n    /**\n     * Add a {@link DataTrackSender} to the {@link PeerConnectionV2}.\n     * @param {DataTrackSender} dataTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addDataTrackSender',\n    value: function addDataTrackSender(dataTrackSender) {\n      if (this._dataChannels.has(dataTrackSender)) {\n        return;\n      }\n      try {\n        var dataChannelDict = {\n          ordered: dataTrackSender.ordered\n        };\n        if (dataTrackSender.maxPacketLifeTime !== null) {\n          dataChannelDict.maxPacketLifeTime = dataTrackSender.maxPacketLifeTime;\n        }\n        if (dataTrackSender.maxRetransmits !== null) {\n          dataChannelDict.maxRetransmits = dataTrackSender.maxRetransmits;\n        }\n        var dataChannel = this._peerConnection.createDataChannel(dataTrackSender.id, dataChannelDict);\n        dataTrackSender.addDataChannel(dataChannel);\n        this._dataChannels.set(dataTrackSender, dataChannel);\n      } catch (error) {\n        // Do nothing.\n      }\n    }\n\n    /**\n     * Add the {@link MediaTrackSender} to the {@link PeerConnectionV2}.\n     * @param {MediaTrackSender} mediaTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addMediaTrackSender',\n    value: function addMediaTrackSender(mediaTrackSender) {\n      if (this._peerConnection.signalingState === 'closed' || this._rtpSenders.has(mediaTrackSender)) {\n        return;\n      }\n      var sender = void 0;\n      if (this._localMediaStream) {\n        this._localMediaStream.addTrack(mediaTrackSender.track);\n        sender = this._peerConnection.addTrack(mediaTrackSender.track, this._localMediaStream);\n      } else {\n        var transceiver = this._addOrUpdateTransceiver(mediaTrackSender.track);\n        sender = transceiver.sender;\n      }\n      mediaTrackSender.addSender(sender);\n      this._rtpSenders.set(mediaTrackSender, sender);\n    }\n\n    /**\n     * Close the {@link PeerConnectionV2}.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this._close()) {\n        this._descriptionRevision++;\n        this._localDescription = { type: 'close' };\n        this.emit('description', this.getState());\n      }\n    }\n\n    /**\n     * Get the {@link DataTrackReceiver}s and the {@link MediaTrackReceivers} on the\n     * {@link PeerConnectionV2}.\n     * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\n     */\n\n  }, {\n    key: 'getTrackReceivers',\n    value: function getTrackReceivers() {\n      return Array.from(this._dataTrackReceivers).concat(Array.from(this._mediaTrackReceivers));\n    }\n\n    /**\n     * Get the {@link PeerConnectionV2}'s state (specifically, its description).\n     * @returns {?object}\n     */\n\n  }, {\n    key: 'getState',\n    value: function getState() {\n      if (!this._localDescription) {\n        return null;\n      }\n      var localDescription = {\n        type: this._localDescription.type,\n        revision: this._descriptionRevision\n      };\n      if (this._localDescription.sdp) {\n        localDescription.sdp = this._localDescription.sdp;\n      }\n      return {\n        description: localDescription,\n        id: this.id\n      };\n    }\n\n    /**\n     * Create an offer and set it on the {@link PeerConnectionV2}.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'offer',\n    value: function offer() {\n      var _this14 = this;\n\n      if (this._needsAnswer || this._isRestartingIce) {\n        this._shouldOffer = true;\n        return Promise.resolve();\n      }\n\n      return this.bracket('offering', function (key) {\n        _this14.transition('updating', key);\n        var promise = _this14._needsAnswer || _this14._isRestartingIce ? Promise.resolve() : _this14._offer();\n        return promise.then(function () {\n          _this14.tryTransition('open', key);\n        }, function (error) {\n          _this14.tryTransition('open', key);\n          throw error;\n        });\n      });\n    }\n\n    /**\n     * Remove a {@link DataTrackSender} from the {@link PeerConnectionV2}.\n     * @param {DataTrackSender} dataTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'removeDataTrackSender',\n    value: function removeDataTrackSender(dataTrackSender) {\n      var dataChannel = this._dataChannels.get(dataTrackSender);\n      if (dataChannel) {\n        dataTrackSender.removeDataChannel(dataChannel);\n        this._dataChannels.delete(dataTrackSender);\n        dataChannel.close();\n      }\n    }\n\n    /**\n     * Remove the {@link MediaTrackSender} from the {@link PeerConnectionV2}.\n     * @param {MediaTrackSender} mediaTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'removeMediaTrackSender',\n    value: function removeMediaTrackSender(mediaTrackSender) {\n      if (this._peerConnection.signalingState === 'closed' || !this._rtpSenders.has(mediaTrackSender)) {\n        return;\n      }\n      var sender = this._rtpSenders.get(mediaTrackSender);\n      this._peerConnection.removeTrack(sender);\n      if (this._localMediaStream) {\n        this._localMediaStream.removeTrack(mediaTrackSender.track);\n      }\n      mediaTrackSender.removeSender(sender);\n      this._rtpSenders.delete(mediaTrackSender);\n    }\n\n    /**\n     * Set the RTCConfiguration on the underlying RTCPeerConnection.\n     * @param {RTCConfiguration} configuration\n     * @returns {void}\n     */\n\n  }, {\n    key: 'setConfiguration',\n    value: function setConfiguration(configuration) {\n      if (typeof this._peerConnection.setConfiguration === 'function') {\n        this._peerConnection.setConfiguration(getConfiguration(configuration));\n      }\n    }\n\n    /**\n     * Update the {@link PeerConnectionV2}.\n     * @param {object} peerConnectionState\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(peerConnectionState) {\n      var _this15 = this;\n\n      return this.bracket('updating', function (key) {\n        if (_this15.state === 'closed') {\n          return Promise.resolve();\n        }\n\n        _this15.transition('updating', key);\n\n        var updates = [];\n\n        if (peerConnectionState.ice) {\n          updates.push(_this15._updateIce(peerConnectionState.ice));\n        }\n\n        if (peerConnectionState.description) {\n          updates.push(_this15._updateDescription(peerConnectionState.description));\n        }\n\n        return Promise.all(updates).then(function () {\n          _this15.tryTransition('open', key);\n        }, function (error) {\n          _this15.tryTransition('open', key);\n          throw error;\n        });\n      });\n    }\n\n    /**\n     * Get the {@link PeerConnectionV2}'s media statistics.\n     * @returns {Promise<StandardizedStatsResponse>}\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var _this16 = this;\n\n      return getStatistics(this._peerConnection).then(function (response) {\n        return rewriteTrackIds(_this16, response);\n      });\n    }\n  }, {\n    key: 'iceConnectionState',\n    get: function get() {\n      return this._isIceConnectionInactive && this._peerConnection.iceConnectionState === 'disconnected' ? 'failed' : this._peerConnection.iceConnectionState;\n    }\n\n    /**\n     * Whether the {@link PeerConnectionV2} has negotiated or is in the process\n     * of negotiating the application m= section.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isApplicationSectionNegotiated',\n    get: function get() {\n      return this._peerConnection.localDescription ? getMediaSections(this._peerConnection.localDescription.sdp, 'application').length > 0 : false;\n    }\n  }]);\n\n  return PeerConnectionV2;\n}(StateMachine);\n\nfunction rewriteTrackId(pcv2, stats) {\n  var receiver = [].concat(_toConsumableArray(pcv2._mediaTrackReceivers)).find(function (receiver) {\n    return receiver.track.id === stats.trackId;\n  });\n  var trackId = receiver ? receiver.id : null;\n  return Object.assign(stats, { trackId: trackId });\n}\n\nfunction rewriteTrackIds(pcv2, response) {\n  return Object.assign(response, {\n    remoteAudioTrackStats: response.remoteAudioTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    }),\n    remoteVideoTrackStats: response.remoteVideoTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    })\n  });\n}\n\n/**\n * @event PeerConnectionV2#candidates\n * @param {object} candidates\n */\n\n/**\n * @event PeerConnectionV2#description\n * @param {object} description\n */\n\n/**\n * @event PeerConnectionV2#iceConnectionStateChanged\n */\n\n/**\n * @event PeerConnectionV2#trackAdded\n * @param {DataTrackReceiver|MediaTrackReceiver} trackReceiver\n */\n\nfunction getUfrag(description) {\n  if (description.sdp) {\n    var match = description.sdp.match(/^a=ice-ufrag:([a-zA-Z0-9+/]+)/m);\n    if (match) {\n      return match[1];\n    }\n  }\n  return null;\n}\n\nfunction getConfiguration(configuration) {\n  return Object.assign({\n    bundlePolicy: 'max-bundle',\n    rtcpMuxPolicy: 'require'\n  }, configuration);\n}\n\n/**\n * Whether the MediaStreamTrack of the given RTCRTPSender is a non-ended\n * MediaStreamTrack of a given kind.\n * @private\n * @param {string} kind\n * @param {RTCRtpSender} sender\n * @return {boolean}\n */\nfunction isSenderOfKind(kind, sender) {\n  var track = sender.track;\n  return track && track.kind === kind && track.readyState !== 'ended';\n}\n\n/**\n * Preferred codecs.\n * @typedef {object} PreferredCodecs\n * @property {Array<AudioCodec>} audio\n * @property {Array<VideoCodec>} video\n */\n\nfunction filterOutMediaStreamIds(sdp) {\n  return sdp.replace(/a=msid:[^ ]+ /g, 'a=msid:- ');\n}\n\n/**\n * Whether an RTCRtpTransceiver can be recycled.\n * @param {RTCRtpTransceiver} transceiver\n * @returns {boolean}\n */\nfunction shouldRecycleTransceiver(transceiver, pcv2) {\n  return !transceiver.stopped && !pcv2._replaceTrackPromises.has(transceiver) && (transceiver.currentDirection === 'inactive' || transceiver.currentDirection === 'recvonly' || transceiver.direction === 'recvonly');\n}\n\n/**\n * Take a recycled RTCRtpTransceiver if available.\n * @param {PeerConnectionV2} pcv2\n * @param {Track.Kind} kind\n * @returns {?RTCRtpTransceiver}\n */\nfunction takeRecycledTransceiver(pcv2, kind) {\n  var preferredCodecs = {\n    audio: pcv2._preferredAudioCodecs.map(function (codec) {\n      return codec.toLowerCase();\n    }),\n    video: pcv2._preferredVideoCodecs.map(function (_ref7) {\n      var codec = _ref7.codec;\n      return codec.toLowerCase();\n    })\n  }[kind];\n\n  var recycledTransceivers = pcv2._recycledTransceivers[kind];\n  var localCodec = preferredCodecs.find(function (codec) {\n    return pcv2._localCodecs.has(codec);\n  });\n  if (!localCodec) {\n    return recycledTransceivers.shift();\n  }\n\n  var transceiver = recycledTransceivers.find(function (transceiver) {\n    var remoteCodecMap = pcv2._remoteCodecMaps.get(transceiver.mid);\n    return remoteCodecMap && remoteCodecMap.has(localCodec);\n  });\n\n  if (transceiver) {\n    recycledTransceivers.splice(recycledTransceivers.indexOf(transceiver), 1);\n  }\n  return transceiver;\n}\n\n/**\n * Update the set of locally supported {@link Codec}s.\n * @param pcv2\n * @returns {void}\n */\nfunction updateLocalCodecs(pcv2) {\n  var description = pcv2._peerConnection.localDescription;\n  if (!description) {\n    return;\n  }\n  getMediaSections(description.sdp).forEach(function (section) {\n    var codecMap = createCodecMapForMediaSection(section);\n    codecMap.forEach(function (pts, codec) {\n      return pcv2._localCodecs.add(codec);\n    });\n  });\n}\n\n/**\n * Update the {@link Codec} maps for all m= sections in the remote {@link RTCSessionDescription}s.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\nfunction updateRemoteCodecMaps(pcv2) {\n  var description = pcv2._peerConnection.remoteDescription;\n  if (!description) {\n    return;\n  }\n  getMediaSections(description.sdp).forEach(function (section) {\n    var mid = section.match(/^a=mid:(.+)$/m)[1];\n    var codecMap = createCodecMapForMediaSection(section);\n    pcv2._remoteCodecMaps.set(mid, codecMap);\n  });\n}\n\n/**\n * Update the list of recycled RTCRtpTransceivers.\n * @param {PeerConnectionV2} pcv2\n */\nfunction updateRecycledTransceivers(pcv2) {\n  pcv2._recycledTransceivers.audio = [];\n  pcv2._recycledTransceivers.video = [];\n  pcv2._peerConnection.getTransceivers().forEach(function (transceiver) {\n    if (shouldRecycleTransceiver(transceiver, pcv2)) {\n      var track = transceiver.receiver.track;\n      pcv2._recycledTransceivers[track.kind].push(transceiver);\n    }\n  });\n}\n\n/**\n * Perform certain updates after an SDP negotiation is completed.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\nfunction negotiationCompleted(pcv2) {\n  if (pcv2._isUnifiedPlan) {\n    updateRecycledTransceivers(pcv2);\n    updateLocalCodecs(pcv2);\n    updateRemoteCodecMaps(pcv2);\n  }\n  if (pcv2._isRTCRtpSenderParamsSupported) {\n    updateEncodingParameters(pcv2);\n  }\n}\n\n/**\n * Update the RTCRtpEncodingParameters of all active RTCRtpSenders.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\nfunction updateEncodingParameters(pcv2) {\n  var _pcv2$_encodingParame = pcv2._encodingParameters,\n      maxAudioBitrate = _pcv2$_encodingParame.maxAudioBitrate,\n      maxVideoBitrate = _pcv2$_encodingParame.maxVideoBitrate;\n\n\n  var maxBitrates = new Map([['audio', maxAudioBitrate], ['video', maxVideoBitrate]]);\n\n  pcv2._peerConnection.getSenders().filter(function (sender) {\n    return sender.track;\n  }).forEach(function (sender) {\n    var maxBitrate = maxBitrates.get(sender.track.kind);\n    var params = sender.getParameters();\n\n    if (maxBitrate === null || maxBitrate === 0) {\n      removeMaxBitrate(params);\n    } else if (utils.isChromeScreenShareTrack(sender.track)) {\n      // NOTE(mpatwardhan): Sometimes (JSDK-2557) chrome does not send any bytes on screen track if MaxBitRate is set on it via setParameters,\n      // To workaround this issue we will not apply maxBitrate if the track appears to be a screen share track created by chrome\n      pcv2._log.warn('Not setting maxBitrate for ' + sender.track.kind + ' Track ' + sender.track.id + ' because it appears to be screen share track: ' + sender.track.label);\n    } else {\n      setMaxBitrate(params, maxBitrate);\n    }\n\n    if (!isFirefox && pcv2._enableDscp && params.encodings.length > 0) {\n      // NOTE(mmalavalli): \"networkPriority\" is a per-sender property and not\n      // a per-encoding-layer property. So, we set the value only on the first\n      // encoding layer. Any attempt to set the value on subsequent encoding\n      // layers (in the case of simulcast) will result in the Promise returned\n      // by RTCRtpSender.setParameters() being rejected.\n      params.encodings[0].networkPriority = 'high';\n    }\n\n    sender.setParameters(params).catch(function (error) {\n      pcv2._log.warn('Error while setting encodings parameters for ' + sender.track.kind + ' Track ' + sender.track.id + ': ' + (error.message || error.name));\n    });\n  });\n}\n\n/**\n * Remove maxBitrate from the RTCRtpSendParameters' encodings.\n * @param {RTCRtpSendParameters} params\n * @returns {void}\n */\nfunction removeMaxBitrate(params) {\n  if (Array.isArray(params.encodings)) {\n    params.encodings.forEach(function (encoding) {\n      return delete encoding.maxBitrate;\n    });\n  }\n}\n\n/**\n * Set the given maxBitrate in the RTCRtpSendParameters' encodings.\n * @param {RTCRtpSendParameters} params\n * @param {number} maxBitrate\n * @returns {void}\n */\nfunction setMaxBitrate(params, maxBitrate) {\n  if (isFirefox) {\n    params.encodings = [{ maxBitrate: maxBitrate }];\n  } else {\n    params.encodings.forEach(function (encoding) {\n      encoding.maxBitrate = maxBitrate;\n    });\n  }\n}\n\nmodule.exports = PeerConnectionV2;"]},"metadata":{},"sourceType":"script"}